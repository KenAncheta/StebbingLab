# For donor details see in clinical_data.csv, please contact Dr. Biancastella Cereser (B.Cereser@imperial.ac.uk)

# Abbreviations
# par, parous; str, stroma; epi, epithilium; str, stroma; chr, chromosome

###########################################################################
###########################################################################
# Get read counts
library(cn.mops)

# chromosome 1
BAMFiles.chr1 <- list.files(pattern = "chr1.bam$")
bamDataRanges.chr1 <- getReadCountsFromBAM(BAMFiles.chr1, 
                                           sampleNames = c("A1","a33","AA27","B2","b34","BB28","C3","c35","CC29","d36",
                                                           "D4","DD30","e37","E41","E5","E59","E61","E63","E65","E67",
                                                           "E71","E75","E77","EE31","f38","F6","FF32","g39","G7","h40",
                                                           "H8","I9","J10","K11","L12","M13","N14","O15","P16","Q17",
                                                           "R18","S19","S42","S60","S62","S64","S66","S68","S72","S76",
                                                           "S78","T20","U21","V22","W23","X24","Y25","Z26"),
                                           refSeqNames = "chr1")
# chromosome 2
BAMFiles.chr2 <- list.files(pattern = "chr2.bam$")
bamDataRanges.chr2 <- getReadCountsFromBAM(BAMFiles.chr2, 
                                           sampleNames = c("A1","a33","AA27","B2","b34","BB28","C3","c35","CC29","d36",
                                                           "D4","DD30","e37","E41","E5","E59","E61","E63","E65","E67",
                                                           "E71","E75","E77","EE31","f38","F6","FF32","g39","G7","h40",
                                                           "H8","I9","J10","K11","L12","M13","N14","O15","P16","Q17",
                                                           "R18","S19","S42","S60","S62","S64","S66","S68","S72","S76",
                                                           "S78","T20","U21","V22","W23","X24","Y25","Z26"),
                                           refSeqNames = "chr2")
# chromosome 3
BAMFiles.chr3 <- list.files(pattern = "chr3.bam$")
bamDataRanges.chr3 <- getReadCountsFromBAM(BAMFiles.chr3, 
                                           sampleNames = c("A1","a33","AA27","B2","b34","BB28","C3","c35","CC29","d36",
                                                           "D4","DD30","e37","E41","E5","E59","E61","E63","E65","E67",
                                                           "E71","E75","E77","EE31","f38","F6","FF32","g39","G7","h40",
                                                           "H8","I9","J10","K11","L12","M13","N14","O15","P16","Q17",
                                                           "R18","S19","S42","S60","S62","S64","S66","S68","S72","S76",
                                                           "S78","T20","U21","V22","W23","X24","Y25","Z26"),
                                           refSeqNames = "chr3")
# chromosome 4
BAMFiles.chr4 <- list.files(pattern = "chr4.bam$")
bamDataRanges.chr4 <- getReadCountsFromBAM(BAMFiles.chr4, 
                                           sampleNames = c("A1","a33","AA27","B2","b34","BB28","C3","c35","CC29","d36",
                                                           "D4","DD30","e37","E41","E5","E59","E61","E63","E65","E67",
                                                           "E71","E75","E77","EE31","f38","F6","FF32","g39","G7","h40",
                                                           "H8","I9","J10","K11","L12","M13","N14","O15","P16","Q17",
                                                           "R18","S19","S42","S60","S62","S64","S66","S68","S72","S76",
                                                           "S78","T20","U21","V22","W23","X24","Y25","Z26"),
                                           refSeqNames = "chr4")
# chromosome 5
BAMFiles.chr5 <- list.files(pattern = "chr5.bam$")
bamDataRanges.chr5 <- getReadCountsFromBAM(BAMFiles.chr5, 
                                           sampleNames = c("A1","a33","AA27","B2","b34","BB28","C3","c35","CC29","d36",
                                                           "D4","DD30","e37","E41","E5","E59","E61","E63","E65","E67",
                                                           "E71","E75","E77","EE31","f38","F6","FF32","g39","G7","h40",
                                                           "H8","I9","J10","K11","L12","M13","N14","O15","P16","Q17",
                                                           "R18","S19","S42","S60","S62","S64","S66","S68","S72","S76",
                                                           "S78","T20","U21","V22","W23","X24","Y25","Z26"),
                                           refSeqNames = "chr5")
# chromosome 6
BAMFiles.chr6 <- list.files(pattern = "chrchr6.bam$")
bamDataRanges.chr6 <- getReadCountsFromBAM(BAMFiles.chr6, 
                                           sampleNames = c("A1","a33","AA27","B2","b34","BB28","C3","c35","CC29","d36",
                                                           "D4","DD30","e37","E41","E5","E59","E61","E63","E65","E67",
                                                           "E71","E75","E77","EE31","f38","F6","FF32","g39","G7","h40",
                                                           "H8","I9","J10","K11","L12","M13","N14","O15","P16","Q17",
                                                           "R18","S19","S42","S60","S62","S64","S66","S68","S72","S76",
                                                           "S78","T20","U21","V22","W23","X24","Y25","Z26"),
                                           refSeqNames = "chr6")
# chromosome 7
BAMFiles.chr7 <- list.files(pattern = "chr7.bam$")
bamDataRanges.chr7 <- getReadCountsFromBAM(BAMFiles.chr7, 
                                           sampleNames = c("A1","a33","AA27","B2","b34","BB28","C3","c35","CC29","d36",
                                                           "D4","DD30","e37","E41","E5","E59","E61","E63","E65","E67",
                                                           "E71","E75","E77","EE31","f38","F6","FF32","g39","G7","h40",
                                                           "H8","I9","J10","K11","L12","M13","N14","O15","P16","Q17",
                                                           "R18","S19","S42","S60","S62","S64","S66","S68","S72","S76",
                                                           "S78","T20","U21","V22","W23","X24","Y25","Z26"),
                                           refSeqNames = "chr7")
# chromosome 8
BAMFiles.chr8 <- list.files(pattern = "chr8.bam$")
bamDataRanges.chr8 <- getReadCountsFromBAM(BAMFiles.chr8, 
                                           sampleNames = c("A1","a33","AA27","B2","b34","BB28","C3","c35","CC29","d36",
                                                           "D4","DD30","e37","E41","E5","E59","E61","E63","E65","E67",
                                                           "E71","E75","E77","EE31","f38","F6","FF32","g39","G7","h40",
                                                           "H8","I9","J10","K11","L12","M13","N14","O15","P16","Q17",
                                                           "R18","S19","S42","S60","S62","S64","S66","S68","S72","S76",
                                                           "S78","T20","U21","V22","W23","X24","Y25","Z26"),
                                           refSeqNames = "chr8")
# chromosome 9
BAMFiles.chr9 <- list.files(pattern = "chr9.bam$")
bamDataRanges.chr9 <- getReadCountsFromBAM(BAMFiles.chr9, 
                                           sampleNames = c("A1","a33","AA27","B2","b34","BB28","C3","c35","CC29","d36",
                                                           "D4","DD30","e37","E41","E5","E59","E61","E63","E65","E67",
                                                           "E71","E75","E77","EE31","f38","F6","FF32","g39","G7","h40",
                                                           "H8","I9","J10","K11","L12","M13","N14","O15","P16","Q17",
                                                           "R18","S19","S42","S60","S62","S64","S66","S68","S72","S76",
                                                           "S78","T20","U21","V22","W23","X24","Y25","Z26"),
                                           refSeqNames = "chr9")
# chromosome 10
BAMFiles.chr10 <- list.files(pattern = "chr10.bam$")
bamDataRanges.chr10 <- getReadCountsFromBAM(BAMFiles.chr10, 
                                            sampleNames = c("A1","a33","AA27","B2","b34","BB28","C3","c35","CC29","d36",
                                                            "D4","DD30","e37","E41","E5","E59","E61","E63","E65","E67",
                                                            "E71","E75","E77","EE31","f38","F6","FF32","g39","G7","h40",
                                                            "H8","I9","J10","K11","L12","M13","N14","O15","P16","Q17",
                                                            "R18","S19","S42","S60","S62","S64","S66","S68","S72","S76",
                                                            "S78","T20","U21","V22","W23","X24","Y25","Z26"),
                                            refSeqNames = "chr10")
# chromosome 11
BAMFiles.chr11 <- list.files(pattern = "chr11.bam$")
bamDataRanges.chr11 <- getReadCountsFromBAM(BAMFiles.chr11, 
                                            sampleNames = c("A1","a33","AA27","B2","b34","BB28","C3","c35","CC29","d36",
                                                            "D4","DD30","e37","E41","E5","E59","E61","E63","E65","E67",
                                                            "E71","E75","E77","EE31","f38","F6","FF32","g39","G7","h40",
                                                            "H8","I9","J10","K11","L12","M13","N14","O15","P16","Q17",
                                                            "R18","S19","S42","S60","S62","S64","S66","S68","S72","S76",
                                                            "S78","T20","U21","V22","W23","X24","Y25","Z26"),
                                            refSeqNames = "chr11")
# chromosome 12
BAMFiles.chr12 <- list.files(pattern = "chr12.bam$")
bamDataRanges.chr12 <- getReadCountsFromBAM(BAMFiles.chr12, 
                                            sampleNames = c("A1","a33","AA27","B2","b34","BB28","C3","c35","CC29","d36",
                                                            "D4","DD30","e37","E41","E5","E59","E61","E63","E65","E67",
                                                            "E71","E75","E77","EE31","f38","F6","FF32","g39","G7","h40",
                                                            "H8","I9","J10","K11","L12","M13","N14","O15","P16","Q17",
                                                            "R18","S19","S42","S60","S62","S64","S66","S68","S72","S76",
                                                            "S78","T20","U21","V22","W23","X24","Y25","Z26"),
                                            refSeqNames = "chr12")
# chromosome 13
BAMFiles.chr13 <- list.files(pattern = "chr13.bam$")
bamDataRanges.chr13 <- getReadCountsFromBAM(BAMFiles.chr13, 
                                            sampleNames = c("A1","a33","AA27","B2","b34","BB28","C3","c35","CC29","d36",
                                                            "D4","DD30","e37","E41","E5","E59","E61","E63","E65","E67",
                                                            "E71","E75","E77","EE31","f38","F6","FF32","g39","G7","h40",
                                                            "H8","I9","J10","K11","L12","M13","N14","O15","P16","Q17",
                                                            "R18","S19","S42","S60","S62","S64","S66","S68","S72","S76",
                                                            "S78","T20","U21","V22","W23","X24","Y25","Z26"),
                                            refSeqNames = "chr13")
# chromosome 14
BAMFiles.chr14 <- list.files(pattern = "chr14.bam$")
bamDataRanges.chr14 <- getReadCountsFromBAM(BAMFiles.chr14, 
                                            sampleNames = c("A1","a33","AA27","B2","b34","BB28","C3","c35","CC29","d36",
                                                            "D4","DD30","e37","E41","E5","E59","E61","E63","E65","E67",
                                                            "E71","E75","E77","EE31","f38","F6","FF32","g39","G7","h40",
                                                            "H8","I9","J10","K11","L12","M13","N14","O15","P16","Q17",
                                                            "R18","S19","S42","S60","S62","S64","S66","S68","S72","S76",
                                                            "S78","T20","U21","V22","W23","X24","Y25","Z26"),
                                            refSeqNames = "chr14")
# chromosome 15
BAMFiles.chr15 <- list.files(pattern = "chr15.bam$")
bamDataRanges.chr15 <- getReadCountsFromBAM(BAMFiles.chr15, 
                                            sampleNames = c("A1","a33","AA27","B2","b34","BB28","C3","c35","CC29","d36",
                                                            "D4","DD30","e37","E41","E5","E59","E61","E63","E65","E67",
                                                            "E71","E75","E77","EE31","f38","F6","FF32","g39","G7","h40",
                                                            "H8","I9","J10","K11","L12","M13","N14","O15","P16","Q17",
                                                            "R18","S19","S42","S60","S62","S64","S66","S68","S72","S76",
                                                            "S78","T20","U21","V22","W23","X24","Y25","Z26"),
                                            refSeqNames = "chr15")
# chromosome 16
BAMFiles.chr16 <- list.files(pattern = "chr16.bam$")
bamDataRanges.chr16 <- getReadCountsFromBAM(BAMFiles.chr16, 
                                            sampleNames = c("A1","a33","AA27","B2","b34","BB28","C3","c35","CC29","d36",
                                                            "D4","DD30","e37","E41","E5","E59","E61","E63","E65","E67",
                                                            "E71","E75","E77","EE31","f38","F6","FF32","g39","G7","h40",
                                                            "H8","I9","J10","K11","L12","M13","N14","O15","P16","Q17",
                                                            "R18","S19","S42","S60","S62","S64","S66","S68","S72","S76",
                                                            "S78","T20","U21","V22","W23","X24","Y25","Z26"),
                                            refSeqNames = "chr16")
# chromosome 17
BAMFiles.chr17 <- list.files(pattern = "chr17.bam$")
bamDataRanges.chr17 <- getReadCountsFromBAM(BAMFiles.chr17, 
                                            sampleNames = c("A1","a33","AA27","B2","b34","BB28","C3","c35","CC29","d36",
                                                            "D4","DD30","e37","E41","E5","E59","E61","E63","E65","E67",
                                                            "E71","E75","E77","EE31","f38","F6","FF32","g39","G7","h40",
                                                            "H8","I9","J10","K11","L12","M13","N14","O15","P16","Q17",
                                                            "R18","S19","S42","S60","S62","S64","S66","S68","S72","S76",
                                                            "S78","T20","U21","V22","W23","X24","Y25","Z26"),
                                            refSeqNames = "chr17")
# chromosome 18
BAMFiles.chr18 <- list.files(pattern = "chr18.bam$")
bamDataRanges.chr18 <- getReadCountsFromBAM(BAMFiles.chr18, 
                                            sampleNames = c("A1","a33","AA27","B2","b34","BB28","C3","c35","CC29","d36",
                                                            "D4","DD30","e37","E41","E5","E59","E61","E63","E65","E67",
                                                            "E71","E75","E77","EE31","f38","F6","FF32","g39","G7","h40",
                                                            "H8","I9","J10","K11","L12","M13","N14","O15","P16","Q17",
                                                            "R18","S19","S42","S60","S62","S64","S66","S68","S72","S76",
                                                            "S78","T20","U21","V22","W23","X24","Y25","Z26"),
                                            refSeqNames = "chr18")
# chromosome 19
BAMFiles.chr19 <- list.files(pattern = "chr19.bam$")
bamDataRanges.chr19 <- getReadCountsFromBAM(BAMFiles.chr19, 
                                            sampleNames = c("A1","a33","AA27","B2","b34","BB28","C3","c35","CC29","d36",
                                                            "D4","DD30","e37","E41","E5","E59","E61","E63","E65","E67",
                                                            "E71","E75","E77","EE31","f38","F6","FF32","g39","G7","h40",
                                                            "H8","I9","J10","K11","L12","M13","N14","O15","P16","Q17",
                                                            "R18","S19","S42","S60","S62","S64","S66","S68","S72","S76",
                                                            "S78","T20","U21","V22","W23","X24","Y25","Z26"),
                                            refSeqNames = "chr19")
# chromosome 20
# Missing Samples: E59 and S60
BAMFiles.chr20 <- list.files(pattern = "chr20.bam$")
bamDataRanges.chr20 <- getReadCountsFromBAM(BAMFiles.chr20, 
                                            sampleNames = c("A1","a33","AA27","B2","b34","BB28","C3","c35","CC29","d36",
                                                            "D4","DD30","e37","E41","E5","E61","E63","E65","E67",
                                                            "E71","E75","E77","EE31","f38","F6","FF32","g39","G7","h40",
                                                            "H8","I9","J10","K11","L12","M13","N14","O15","P16","Q17",
                                                            "R18","S19","S42","S62","S64","S66","S68","S72","S76",
                                                            "S78","T20","U21","V22","W23","X24","Y25","Z26"),
                                            refSeqNames = "chr20")
# chromosome 21
# Missing Samples: E59 and S60
BAMFiles.chr21 <- list.files(pattern = "chr21.bam$")
bamDataRanges.chr21 <- getReadCountsFromBAM(BAMFiles.chr21, 
                                            sampleNames = c("A1","a33","AA27","B2","b34","BB28","C3","c35","CC29","d36",
                                                            "D4","DD30","e37","E41","E5","E61","E63","E65","E67",
                                                            "E71","E75","E77","EE31","f38","F6","FF32","g39","G7","h40",
                                                            "H8","I9","J10","K11","L12","M13","N14","O15","P16","Q17",
                                                            "R18","S19","S42","S62","S64","S66","S68","S72","S76",
                                                            "S78","T20","U21","V22","W23","X24","Y25","Z26"),
                                            refSeqNames = "chr21")
# chromosome 22
# Missing Samples: E59 and S60
BAMFiles.chr22 <- list.files(pattern = "chr22.bam$")
bamDataRanges.chr22 <- getReadCountsFromBAM(BAMFiles.chr22, 
                                            sampleNames = c("A1","a33","AA27","B2","b34","BB28","C3","c35","CC29",
                                                            "d36","D4","DD30","e37","E41","E5","E61","E65","E67",
                                                            "E71","E75","E77","EE31","f38","F6","FF32","g39","G7","h40",
                                                            "H8","I9","J10","K11","L12","M13","N14","O15","P16","Q17",
                                                            "R18","S19","S42","S62","S66","S68","S72","S76",
                                                            "S78","T20","U21","V22","W23","X24","Y25","Z26"),
                                            refSeqNames = "chr22")
# chromosome X
BAMFiles.chrX <- list.files(pattern = "chrX$")
bamDataRanges.chrX <- getReadCountsFromBAM(BAMFiles.chrX, 
                                           sampleNames = c("A1","a33","AA27","B2","b34","BB28","C3","c35","CC29","d36",
                                                           "D4","DD30","e37","E41","E5","E59","E61","E63","E65","E67",
                                                           "E71","E75","E77","EE31","f38","F6","FF32","g39","G7","h40",
                                                           "H8","I9","J10","K11","L12","M13","N14","O15","P16","Q17",
                                                           "R18","S19","S42","S60","S62","S64","S66","S68","S72","S76",
                                                           "S78","T20","U21","V22","W23","X24","Y25","Z26"),
                                           refSeqNames = "chrX")

###########################################################################
###########################################################################

# CNV calling: referencecn.mops
# CNVs in epithial compartment
# case = epithelium, control = stroma
# Parous

# Chromosome 1
ref_anlysis.chr1_par <- referencecn.mops(case = bamDataRanges.chr1[,c("a33","AA27","CC29","e37","E41","E59",
                                                                      "E61","E63","E67","E71","EE31","G7",
                                                                      "I9","K11","M13","O15","S19")],
                                         control = bamDataRanges.chr1[,c("b34","BB28","DD30","f38","S42","S60",
                                                                         "S62","S64","S68","S72","FF32","H8",
                                                                         "J10","L12","N14","P16","T20")],
                                         norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                         classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 2: Parous
ref_anlysis.chr2_par <- referencecn.mops(case = bamDataRanges.chr2[,c("a33","AA27","CC29","e37","E41","E59",
                                                                      "E61","E63","E67","E71","EE31","G7",
                                                                      "I9","K11","M13","O15","S19")],
                                         control = bamDataRanges.chr2[,c("b34","BB28","DD30","f38","S42","S60",
                                                                         "S62","S64","S68","S72","FF32","H8",
                                                                         "J10","L12","N14","P16","T20")],
                                         norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                         classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)
# Chromosome 3: Parous
ref_anlysis.chr3_par <- referencecn.mops(case = bamDataRanges.chr3[,c("a33","AA27","CC29","e37","E41","E59",
                                                                      "E61","E63","E67","E71","EE31","G7",
                                                                      "I9","K11","M13","O15","S19")],
                                         control = bamDataRanges.chr3[,c("b34","BB28","DD30","f38","S42","S60",
                                                                         "S62","S64","S68","S72","FF32","H8",
                                                                         "J10","L12","N14","P16","T20")],
                                         norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                         classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)


# Chromosome 4: Parous
ref_anlysis.chr4_par <- referencecn.mops(case = bamDataRanges.chr4[,c("a33","AA27","CC29","e37","E41","E59",
                                                                      "E61","E63","E67","E71","EE31","G7",
                                                                      "I9","K11","M13","O15","S19")],
                                         control = bamDataRanges.chr4[,c("b34","BB28","DD30","f38","S42","S60",
                                                                         "S62","S64","S68","S72","FF32","H8",
                                                                         "J10","L12","N14","P16","T20")],
                                         norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                         classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 5: Parous
ref_anlysis.chr5_par <- referencecn.mops(case = bamDataRanges.chr5[,c("a33","AA27","CC29","e37","E41","E59",
                                                                      "E61","E63","E67","E71","EE31","G7",
                                                                      "I9","K11","M13","O15","S19")],
                                         control = bamDataRanges.chr5[,c("b34","BB28","DD30","f38","S42","S60",
                                                                         "S62","S64","S68","S72","FF32","H8",
                                                                         "J10","L12","N14","P16","T20")],
                                         norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                         classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 6: Parous
ref_anlysis.chr6_par <- referencecn.mops(case = bamDataRanges.chr6[,c("a33","AA27","CC29","e37","E41","E59",
                                                                      "E61","E63","E67","E71","EE31","G7",
                                                                      "I9","K11","M13","O15","S19")],
                                         control = bamDataRanges.chr6[,c("b34","BB28","DD30","f38","S42","S60",
                                                                         "S62","S64","S68","S72","FF32","H8",
                                                                         "J10","L12","N14","P16","T20")],
                                         norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                         classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 7: Parous
ref_anlysis.chr7_par <- referencecn.mops(case = bamDataRanges.chr7[,c("a33","AA27","CC29","e37","E41","E59",
                                                                      "E61","E63","E67","E71","EE31","G7",
                                                                      "I9","K11","M13","O15","S19")],
                                         control = bamDataRanges.chr7[,c("b34","BB28","DD30","f38","S42","S60",
                                                                         "S62","S64","S68","S72","FF32","H8",
                                                                         "J10","L12","N14","P16","T20")],
                                         norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                         classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 8: Parous
ref_anlysis.chr8_par <- referencecn.mops(case = bamDataRanges.chr8[,c("a33","AA27","CC29","e37","E41","E59",
                                                                      "E61","E63","E67","E71","EE31","G7",
                                                                      "I9","K11","M13","O15","S19")],
                                         control = bamDataRanges.chr8[,c("b34","BB28","DD30","f38","S42","S60",
                                                                         "S62","S64","S68","S72","FF32","H8",
                                                                         "J10","L12","N14","P16","T20")],
                                         norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                         classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 9: Parous
ref_anlysis.chr9_par <- referencecn.mops(case = bamDataRanges.chr9[,c("a33","AA27","CC29","e37","E41","E59",
                                                                      "E61","E63","E67","E71","EE31","G7",
                                                                      "I9","K11","M13","O15","S19")],
                                         control = bamDataRanges.chr9[,c("b34","BB28","DD30","f38","S42","S60",
                                                                         "S62","S64","S68","S72","FF32","H8",
                                                                         "J10","L12","N14","P16","T20")],
                                         norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                         classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 10: Parous
ref_anlysis.chr10_par <- referencecn.mops(case = bamDataRanges.chr10[,c("a33","AA27","CC29","e37","E41","E59",
                                                                        "E61","E63","E67","E71","EE31","G7",
                                                                        "I9","K11","M13","O15","S19")],
                                          control = bamDataRanges.chr10[,c("b34","BB28","DD30","f38","S42","S60",
                                                                           "S62","S64","S68","S72","FF32","H8",
                                                                           "J10","L12","N14","P16","T20")],
                                          norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                          classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 11: Parous
ref_anlysis.chr11_par <- referencecn.mops(case = bamDataRanges.chr11[,c("a33","AA27","CC29","e37","E41","E59",
                                                                        "E61","E63","E67","E71","EE31","G7",
                                                                        "I9","K11","M13","O15","S19")],
                                          control = bamDataRanges.chr11[,c("b34","BB28","DD30","f38","S42","S60",
                                                                           "S62","S64","S68","S72","FF32","H8",
                                                                           "J10","L12","N14","P16","T20")],
                                          norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                          classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)


# Chromosome 12: Parous
ref_anlysis.chr12_par <- referencecn.mops(case = bamDataRanges.chr12[,c("a33","AA27","CC29","e37","E41","E59",
                                                                        "E61","E63","E67","E71","EE31","G7",
                                                                        "I9","K11","M13","O15","S19")],
                                          control = bamDataRanges.chr12[,c("b34","BB28","DD30","f38","S42","S60",
                                                                           "S62","S64","S68","S72","FF32","H8",
                                                                           "J10","L12","N14","P16","T20")],
                                          norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                          classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 13: Parous
ref_anlysis.chr13_par <- referencecn.mops(case = bamDataRanges.chr13[,c("a33","AA27","CC29","e37","E41","E59",
                                                                        "E61","E63","E67","E71","EE31","G7",
                                                                        "I9","K11","M13","O15","S19")],
                                          control = bamDataRanges.chr13[,c("b34","BB28","DD30","f38","S42","S60",
                                                                           "S62","S64","S68","S72","FF32","H8",
                                                                           "J10","L12","N14","P16","T20")],
                                          norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                          classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 14: Parous
ref_anlysis.chr14_par <- referencecn.mops(case = bamDataRanges.chr14[,c("a33","AA27","CC29","e37","E41","E59",
                                                                        "E61","E63","E67","E71","EE31","G7",
                                                                        "I9","K11","M13","O15","S19")],
                                          control = bamDataRanges.chr14[,c("b34","BB28","DD30","f38","S42","S60",
                                                                           "S62","S64","S68","S72","FF32","H8",
                                                                           "J10","L12","N14","P16","T20")],
                                          norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                          classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 15: Parous
ref_anlysis.chr15_par <- referencecn.mops(case = bamDataRanges.chr15[,c("a33","AA27","CC29","e37","E41","E59",
                                                                        "E61","E63","E67","E71","EE31","G7",
                                                                        "I9","K11","M13","O15","S19")],
                                          control = bamDataRanges.chr15[,c("b34","BB28","DD30","f38","S42","S60",
                                                                           "S62","S64","S68","S72","FF32","H8",
                                                                           "J10","L12","N14","P16","T20")],
                                          norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                          classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 16: Parous
ref_anlysis.chr16_par <- referencecn.mops(case = bamDataRanges.chr16[,c("a33","AA27","CC29","e37","E41","E59",
                                                                        "E61","E63","E67","E71","EE31","G7",
                                                                        "I9","K11","M13","O15","S19")],
                                          control = bamDataRanges.chr16[,c("b34","BB28","DD30","f38","S42","S60",
                                                                           "S62","S64","S68","S72","FF32","H8",
                                                                           "J10","L12","N14","P16","T20")],
                                          norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                          classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 17: Parous
ref_anlysis.chr17_par <- referencecn.mops(case = bamDataRanges.chr17[,c("a33","AA27","CC29","e37","E41","E59",
                                                                        "E61","E63","E67","E71","EE31","G7",
                                                                        "I9","K11","M13","O15","S19")],
                                          control = bamDataRanges.chr17[,c("b34","BB28","DD30","f38","S42","S60",
                                                                           "S62","S64","S68","S72","FF32","H8",
                                                                           "J10","L12","N14","P16","T20")],
                                          norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                          classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 18: Parous
ref_anlysis.chr18_par <- referencecn.mops(case = bamDataRanges.chr18[,c("a33","AA27","CC29","e37","E41","E59",
                                                                        "E61","E63","E67","E71","EE31","G7",
                                                                        "I9","K11","M13","O15","S19")],
                                          control = bamDataRanges.chr18[,c("b34","BB28","DD30","f38","S42","S60",
                                                                           "S62","S64","S68","S72","FF32","H8",
                                                                           "J10","L12","N14","P16","T20")],
                                          norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                          classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 19: Parous
ref_anlysis.chr19_par <- referencecn.mops(case = bamDataRanges.chr19[,c("a33","AA27","CC29","e37","E41","E59",
                                                                        "E61","E63","E67","E71","EE31","G7",
                                                                        "I9","K11","M13","O15","S19")],
                                          control = bamDataRanges.chr19[,c("b34","BB28","DD30","f38","S42","S60",
                                                                           "S62","S64","S68","S72","FF32","H8",
                                                                           "J10","L12","N14","P16","T20")],
                                          norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                          classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 20: Parous
# Missing Samples: E59 and S60
ref_anlysis.chr20_par <- referencecn.mops(case = bamDataRanges.chr20[,c("a33","AA27","CC29","e37","E41",
                                                                        "E61","E63","E67","E71","EE31","G7",
                                                                        "I9","K11","M13","O15","S19")],
                                          control = bamDataRanges.chr20[,c("b34","BB28","DD30","f38","S42",
                                                                           "S62","S64","S68","S72","FF32","H8",
                                                                           "J10","L12","N14","P16","T20")],
                                          norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                          classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 21: Parous
# Missing Samples: E59 and S60
ref_anlysis.chr21_par <- referencecn.mops(case = bamDataRanges.chr21[,c("a33","AA27","CC29","e37","E41",
                                                                        "E61","E63","E67","E71","EE31","G7",
                                                                        "I9","K11","M13","O15","S19")],
                                          control = bamDataRanges.chr21[,c("b34","BB28","DD30","f38","S42",
                                                                           "S62","S64","S68","S72","FF32","H8",
                                                                           "J10","L12","N14","P16","T20")],
                                          norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                          classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 22: Parous
# Missing Samples: E59, E63, S60 and S64
ref_anlysis.chr22_par <- referencecn.mops(case = bamDataRanges.chr22[,c("a33","AA27","CC29","e37","E41",
                                                                        "E61","E67","E71","EE31","G7",
                                                                        "I9","K11","M13","O15","S19")],
                                          control = bamDataRanges.chr22[,c("b34","BB28","DD30","f38","S42",
                                                                           "S62","S68","S72","FF32","H8",
                                                                           "J10","L12","N14","P16","T20")],
                                          norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                          classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)
# Chromosome X: Parous
ref_anlysis.chrX_par <- referencecn.mops(case = bamDataRanges.chrX[,c("a33","AA27","CC29","e37","E41","E59",
                                                                      "E61","E63","E67","E71","EE31","G7",
                                                                      "I9","K11","M13","O15","S19")],
                                         control = bamDataRanges.chrX[,c("b34","BB28","DD30","f38","S42","S60",
                                                                         "S62","S64","S68","S72","FF32","H8",
                                                                         "J10","L12","N14","P16","T20")],
                                         norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                         classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# CNV counting: Parous
CNMOPS.chr1_par <- calcIntegerCopyNumbers(ref_anlysis.chr1_par)
CNMOPS.chr2_par <- calcIntegerCopyNumbers(ref_anlysis.chr2_par)
CNMOPS.chr3_par <- calcIntegerCopyNumbers(ref_anlysis.chr3_par)
CNMOPS.chr4_par <- calcIntegerCopyNumbers(ref_anlysis.chr4_par)
CNMOPS.chr5_par <- calcIntegerCopyNumbers(ref_anlysis.chr5_par)
CNMOPS.chr6_par <- calcIntegerCopyNumbers(ref_anlysis.chr6_par)
CNMOPS.chr7_par <- calcIntegerCopyNumbers(ref_anlysis.chr7_par)
CNMOPS.chr8_par <- calcIntegerCopyNumbers(ref_anlysis.chr8_par)
CNMOPS.chr9_par <- calcIntegerCopyNumbers(ref_anlysis.chr9_par)
CNMOPS.chr10_par <- calcIntegerCopyNumbers(ref_anlysis.chr10_par)
CNMOPS.chr11_par <- calcIntegerCopyNumbers(ref_anlysis.chr11_par)
CNMOPS.chr12_par <- calcIntegerCopyNumbers(ref_anlysis.chr12_par)
CNMOPS.chr13_par <- calcIntegerCopyNumbers(ref_anlysis.chr13_par)
CNMOPS.chr14_par <- calcIntegerCopyNumbers(ref_anlysis.chr14_par)
CNMOPS.chr15_par <- calcIntegerCopyNumbers(ref_anlysis.chr15_par)
CNMOPS.chr16_par <- calcIntegerCopyNumbers(ref_anlysis.chr16_par)
CNMOPS.chr17_par <- calcIntegerCopyNumbers(ref_anlysis.chr17_par)
CNMOPS.chr18_par <- calcIntegerCopyNumbers(ref_anlysis.chr18_par)
CNMOPS.chr19_par <- calcIntegerCopyNumbers(ref_anlysis.chr19_par)
CNMOPS.chr20_par <- calcIntegerCopyNumbers(ref_anlysis.chr20_par)
CNMOPS.chr21_par <- calcIntegerCopyNumbers(ref_anlysis.chr21_par)
CNMOPS.chr22_par <- calcIntegerCopyNumbers(ref_anlysis.chr22_par)
CNMOPS.chrX_par <- calcIntegerCopyNumbers(ref_anlysis.chrX_par)

# CNVRs Parous 
chr1.CNVR_par <- cnvr(CNMOPS.chr1_par)
chr2.CNVR_par <- cnvr(CNMOPS.chr2_par)
chr3.CNVR_par <- cnvr(CNMOPS.chr3_par)
chr4.CNVR_par <- cnvr(CNMOPS.chr4_par)
chr5.CNVR_par <- cnvr(CNMOPS.chr5_par)
chr6.CNVR_par <- cnvr(CNMOPS.chr6_par)
chr7.CNVR_par <- cnvr(CNMOPS.chr7_par)
chr8.CNVR_par <- cnvr(CNMOPS.chr8_par)
chr9.CNVR_par <- cnvr(CNMOPS.chr9_par)
chr10.CNVR_par <- cnvr(CNMOPS.chr10_par)
chr11.CNVR_par <- cnvr(CNMOPS.chr11_par)
chr12.CNVR_par <- cnvr(CNMOPS.chr12_par)
chr13.CNVR_par <- cnvr(CNMOPS.chr13_par)
chr14.CNVR_par <- cnvr(CNMOPS.chr14_par)
chr15.CNVR_par <- cnvr(CNMOPS.chr15_par)
chr16.CNVR_par <- cnvr(CNMOPS.chr16_par)
chr17.CNVR_par <- cnvr(CNMOPS.chr17_par)
chr18.CNVR_par <- cnvr(CNMOPS.chr18_par)
chr19.CNVR_par <- cnvr(CNMOPS.chr19_par)
chr20.CNVR_par <- cnvr(CNMOPS.chr20_par)
chr21.CNVR_par <- cnvr(CNMOPS.chr21_par)
chr22.CNVR_par <- cnvr(CNMOPS.chr22_par)
chrX.CNVR_par <- cnvr(CNMOPS.chrX_par)

# CNVs Parous 
chr1.CNVs_par <- cnvs(CNMOPS.chr1_par)
chr2.CNVs_par <- cnvs(CNMOPS.chr2_par)
chr3.CNVs_par <- cnvs(CNMOPS.chr3_par)
chr4.CNVs_par <- cnvs(CNMOPS.chr4_par)
chr5.CNVs_par <- cnvs(CNMOPS.chr5_par)
chr6.CNVs_par <- cnvs(CNMOPS.chr6_par)
chr7.CNVs_par <- cnvs(CNMOPS.chr7_par)
chr8.CNVs_par <- cnvs(CNMOPS.chr8_par)
chr9.CNVs_par <- cnvs(CNMOPS.chr9_par)
chr10.CNVs_par <- cnvs(CNMOPS.chr10_par)
chr11.CNVs_par <- cnvs(CNMOPS.chr11_par)
chr12.CNVs_par <- cnvs(CNMOPS.chr12_par)
chr13.CNVs_par <- cnvs(CNMOPS.chr13_par)
chr14.CNVs_par <- cnvs(CNMOPS.chr14_par)
chr15.CNVs_par <- cnvs(CNMOPS.chr15_par)
chr16.CNVs_par <- cnvs(CNMOPS.chr16_par)
chr17.CNVs_par <- cnvs(CNMOPS.chr17_par)
chr18.CNVs_par <- cnvs(CNMOPS.chr18_par)
chr19.CNVs_par <- cnvs(CNMOPS.chr19_par)
chr20.CNVs_par <- cnvs(CNMOPS.chr20_par)
chr21.CNVs_par <- cnvs(CNMOPS.chr21_par)
chr22.CNVs_par <- cnvs(CNMOPS.chr22_par)
chrX.CNVs_par <- cnvs(CNMOPS.chrX_par)

###########################################################################
###########################################################################

# Nulliparous
# Chromosome 1: Nulliparous
ref_anlysis.chr1_nul <- referencecn.mops(case = bamDataRanges.chr1[,c("A1","C3","c35","E5","E65","E75","E77",
                                                                      "g39","Q17","U21","W23","Y25")],
                                         control = bamDataRanges.chr1[,c("B2","D4","d36","F6","S66","S76","S78",
                                                                         "h40","R18","V22","X24","Z26")],
                                         norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                         classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 2: Nulliparous
ref_anlysis.chr2_nul <- referencecn.mops(case = bamDataRanges.chr2[,c("A1","C3","c35","E5","E65","E75","E77",
                                                                      "g39","Q17","U21","W23","Y25")],
                                         control = bamDataRanges.chr2[,c("B2","D4","d36","F6","S66","S76","S78",
                                                                         "h40","R18","V22","X24","Z26")],
                                         norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                         classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 3: Nulliparous
ref_anlysis.chr3_nul <- referencecn.mops(case = bamDataRanges.chr3[,c("A1","C3","c35","E5","E65","E75","E77",
                                                                      "g39","Q17","U21","W23","Y25")],
                                         control = bamDataRanges.chr3[,c("B2","D4","d36","F6","S66","S76","S78",
                                                                         "h40","R18","V22","X24","Z26")],
                                         norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                         classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 4: Nulliparous
ref_anlysis.chr4_nul <- referencecn.mops(case = bamDataRanges.chr4[,c("A1","C3","c35","E5","E65","E75","E77",
                                                                      "g39","Q17","U21","W23","Y25")],
                                         control = bamDataRanges.chr4[,c("B2","D4","d36","F6","S66","S76","S78",
                                                                         "h40","R18","V22","X24","Z26")],
                                         norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                         classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 5: Nulliparous
ref_anlysis.chr5_nul <- referencecn.mops(case = bamDataRanges.chr5[,c("A1","C3","c35","E5","E65","E75","E77",
                                                                      "g39","Q17","U21","W23","Y25")],
                                         control = bamDataRanges.chr5[,c("B2","D4","d36","F6","S66","S76","S78",
                                                                         "h40","R18","V22","X24","Z26")],
                                         norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                         classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 6: Nulliparous
ref_anlysis.chr6_nul <- referencecn.mops(case = bamDataRanges.chr6[,c("A1","C3","c35","E5","E65","E75","E77",
                                                                      "g39","Q17","U21","W23","Y25")],
                                         control = bamDataRanges.chr6[,c("B2","D4","d36","F6","S66","S76","S78",
                                                                         "h40","R18","V22","X24","Z26")],
                                         norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                         classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 7: Nulliparous
ref_anlysis.chr7_nul <- referencecn.mops(case = bamDataRanges.chr7[,c("A1","C3","c35","E5","E65","E75","E77",
                                                                      "g39","Q17","U21","W23","Y25")],
                                         control = bamDataRanges.chr7[,c("B2","D4","d36","F6","S66","S76","S78",
                                                                         "h40","R18","V22","X24","Z26")],
                                         norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                         classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 8: Nulliparous
ref_anlysis.chr8_nul <- referencecn.mops(case = bamDataRanges.chr8[,c("A1","C3","c35","E5","E65","E75","E77",
                                                                      "g39","Q17","U21","W23","Y25")],
                                         control = bamDataRanges.chr8[,c("B2","D4","d36","F6","S66","S76","S78",
                                                                         "h40","R18","V22","X24","Z26")],
                                         norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                         classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 9: Nulliparous
ref_anlysis.chr9_nul <- referencecn.mops(case = bamDataRanges.chr9[,c("A1","C3","c35","E5","E65","E75","E77",
                                                                      "g39","Q17","U21","W23","Y25")],
                                         control = bamDataRanges.chr9[,c("B2","D4","d36","F6","S66","S76","S78",
                                                                         "h40","R18","V22","X24","Z26")],
                                         norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                         classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 10: Nulliparous
ref_anlysis.chr10_nul <- referencecn.mops(case = bamDataRanges.chr10[,c("A1","C3","c35","E5","E65","E75","E77",
                                                                        "g39","Q17","U21","W23","Y25")],
                                          control = bamDataRanges.chr10[,c("B2","D4","d36","F6","S66","S76","S78",
                                                                           "h40","R18","V22","X24","Z26")],
                                          norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                          classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 11: Nulliparous
ref_anlysis.chr11_nul <- referencecn.mops(case = bamDataRanges.chr11[,c("A1","C3","c35","E5","E65","E75","E77",
                                                                        "g39","Q17","U21","W23","Y25")],
                                          control = bamDataRanges.chr11[,c("B2","D4","d36","F6","S66","S76","S78",
                                                                           "h40","R18","V22","X24","Z26")],
                                          norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                          classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 12: Nulliparous
ref_anlysis.chr12_nul <- referencecn.mops(case = bamDataRanges.chr12[,c("A1","C3","c35","E5","E65","E75","E77",
                                                                        "g39","Q17","U21","W23","Y25")],
                                          control = bamDataRanges.chr12[,c("B2","D4","d36","F6","S66","S76","S78",
                                                                           "h40","R18","V22","X24","Z26")],
                                          norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                          classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 13: Nulliparous
ref_anlysis.chr13_nul <- referencecn.mops(case = bamDataRanges.chr13[,c("A1","C3","c35","E5","E65","E75","E77",
                                                                        "g39","Q17","U21","W23","Y25")],
                                          control = bamDataRanges.chr13[,c("B2","D4","d36","F6","S66","S76","S78",
                                                                           "h40","R18","V22","X24","Z26")],
                                          norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                          classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 14: Nulliparous
ref_anlysis.chr14_nul <- referencecn.mops(case = bamDataRanges.chr14[,c("A1","C3","c35","E5","E65","E75","E77",
                                                                        "g39","Q17","U21","W23","Y25")],
                                          control = bamDataRanges.chr14[,c("B2","D4","d36","F6","S66","S76","S78",
                                                                           "h40","R18","V22","X24","Z26")],
                                          norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                          classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 15: Nulliparous
ref_anlysis.chr15_nul <- referencecn.mops(case = bamDataRanges.chr15[,c("A1","C3","c35","E5","E65","E75","E77",
                                                                        "g39","Q17","U21","W23","Y25")],
                                          control = bamDataRanges.chr15[,c("B2","D4","d36","F6","S66","S76","S78",
                                                                           "h40","R18","V22","X24","Z26")],
                                          norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                          classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 16: Nulliparous
ref_anlysis.chr16_nul <- referencecn.mops(case = bamDataRanges.chr16[,c("A1","C3","c35","E5","E65","E75","E77",
                                                                        "g39","Q17","U21","W23","Y25")],
                                          control = bamDataRanges.chr16[,c("B2","D4","d36","F6","S66","S76","S78",
                                                                           "h40","R18","V22","X24","Z26")],
                                          norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                          classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 17: Nulliparous
ref_anlysis.chr17_nul <- referencecn.mops(case = bamDataRanges.chr17[,c("A1","C3","c35","E5","E65","E75","E77",
                                                                        "g39","Q17","U21","W23","Y25")],
                                          control = bamDataRanges.chr17[,c("B2","D4","d36","F6","S66","S76","S78",
                                                                           "h40","R18","V22","X24","Z26")],
                                          norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                          classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 18: Nulliparous
ref_anlysis.chr18_nul <- referencecn.mops(case = bamDataRanges.chr18[,c("A1","C3","c35","E5","E65","E75","E77",
                                                                        "g39","Q17","U21","W23","Y25")],
                                          control = bamDataRanges.chr18[,c("B2","D4","d36","F6","S66","S76","S78",
                                                                           "h40","R18","V22","X24","Z26")],
                                          norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                          classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)


# Chromosome 19: Nulliparous
ref_anlysis.chr19_nul <- referencecn.mops(case = bamDataRanges.chr19[,c("A1","C3","c35","E5","E65","E75","E77",
                                                                        "g39","Q17","U21","W23","Y25")],
                                          control = bamDataRanges.chr19[,c("B2","D4","d36","F6","S66","S76","S78",
                                                                           "h40","R18","V22","X24","Z26")],
                                          norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                          classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 20: Nulliparous
# No CNV Detected
ref_anlysis.chr20_nul <- referencecn.mops(case = bamDataRanges.chr20[,c("A1","C3","c35","E5","E65","E75","E77",
                                                                        "g39","Q17","U21","W23","Y25")],
                                          control = bamDataRanges.chr20[,c("B2","D4","d36","F6","S66","S76","S78",
                                                                           "h40","R18","V22","X24","Z26")],
                                          norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                          classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 21: Nulliparous
ref_anlysis.chr21_nul <- referencecn.mops(case = bamDataRanges.chr21[,c("A1","C3","c35","E5","E65","E75","E77",
                                                                        "g39","Q17","U21","W23","Y25")],
                                          control = bamDataRanges.chr21[,c("B2","D4","d36","F6","S66","S76","S78",
                                                                           "h40","R18","V22","X24","Z26")],
                                          norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                          classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 22: Nulliparous
ref_anlysis.chr22_nul <- referencecn.mops(case = bamDataRanges.chr22[,c("A1","C3","c35","E5","E65","E75","E77",
                                                                        "g39","Q17","U21","W23","Y25")],
                                          control = bamDataRanges.chr22[,c("B2","D4","d36","F6","S66","S76","S78",
                                                                           "h40","R18","V22","X24","Z26")],
                                          norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                          classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome X: Nulliparous
ref_anlysis.chrX_nul <- referencecn.mops(case = bamDataRanges.chrX[,c("A1","C3","c35","E5","E65","E75","E77",
                                                                      "g39","Q17","U21","W23","Y25")],
                                         control = bamDataRanges.chrX[,c("B2","D4","d36","F6","S66","S76","S78",
                                                                         "h40","R18","V22","X24","Z26")],
                                         norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                         classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# CNV counting Nulliparous
CNMOPS.chr1_nul <- calcIntegerCopyNumbers(ref_anlysis.chr1_nul)
CNMOPS.chr2_nul <- calcIntegerCopyNumbers(ref_anlysis.chr2_nul)
CNMOPS.chr3_nul <- calcIntegerCopyNumbers(ref_anlysis.chr3_nul)
CNMOPS.chr4_nul <- calcIntegerCopyNumbers(ref_anlysis.chr4_nul)
CNMOPS.chr5_nul <- calcIntegerCopyNumbers(ref_anlysis.chr5_nul)
CNMOPS.chr6_nul <- calcIntegerCopyNumbers(ref_anlysis.chr6_nul)
CNMOPS.chr7_nul <- calcIntegerCopyNumbers(ref_anlysis.chr7_nul)
CNMOPS.chr8_nul <- calcIntegerCopyNumbers(ref_anlysis.chr8_nul)
CNMOPS.chr9_nul <- calcIntegerCopyNumbers(ref_anlysis.chr9_nul)
CNMOPS.chr10_nul <- calcIntegerCopyNumbers(ref_anlysis.chr10_nul)
CNMOPS.chr11_nul <- calcIntegerCopyNumbers(ref_anlysis.chr11_nul)
CNMOPS.chr12_nul <- calcIntegerCopyNumbers(ref_anlysis.chr12_nul)
CNMOPS.chr13_nul <- calcIntegerCopyNumbers(ref_anlysis.chr13_nul) # NO  CNV Detected
CNMOPS.chr14_nul <- calcIntegerCopyNumbers(ref_anlysis.chr14_nul)
CNMOPS.chr15_nul <- calcIntegerCopyNumbers(ref_anlysis.chr15_nul)
CNMOPS.chr16_nul <- calcIntegerCopyNumbers(ref_anlysis.chr16_nul)
CNMOPS.chr17_nul <- calcIntegerCopyNumbers(ref_anlysis.chr17_nul)
CNMOPS.chr18_nul <- calcIntegerCopyNumbers(ref_anlysis.chr18_nul) # NO  CNV Detected
CNMOPS.chr19_nul <- calcIntegerCopyNumbers(ref_anlysis.chr19_nul)
CNMOPS.chr20_nul <- calcIntegerCopyNumbers(ref_anlysis.chr20_nul) # No CNV Detected
CNMOPS.chr21_nul <- calcIntegerCopyNumbers(ref_anlysis.chr21_nul)
CNMOPS.chr22_nul <- calcIntegerCopyNumbers(ref_anlysis.chr22_nul)
CNMOPS.chrX_nul <- calcIntegerCopyNumbers(ref_anlysis.chrX_nul)

# CNVRs Nulliparous
chr1.CNVR_nul <- cnvr(CNMOPS.chr1_nul)
chr2.CNVR_nul <- cnvr(CNMOPS.chr2_nul)
chr3.CNVR_nul <- cnvr(CNMOPS.chr3_nul)
chr4.CNVR_nul <- cnvr(CNMOPS.chr4_nul)
chr5.CNVR_nul <- cnvr(CNMOPS.chr5_nul)
chr6.CNVR_nul <- cnvr(CNMOPS.chr6_nul)
chr7.CNVR_nul <- cnvr(CNMOPS.chr7_nul)
chr8.CNVR_nul <- cnvr(CNMOPS.chr8_nul)
chr9.CNVR_nul <- cnvr(CNMOPS.chr9_nul)
chr10.CNVR_nul <- cnvr(CNMOPS.chr10_nul)
chr11.CNVR_nul <- cnvr(CNMOPS.chr11_nul)
chr12.CNVR_nul <- cnvr(CNMOPS.chr12_nul)
chr13.CNVR_nul <- cnvr(CNMOPS.chr13_nul) # NO CNV Detected
chr14.CNVR_nul <- cnvr(CNMOPS.chr14_nul)
chr15.CNVR_nul <- cnvr(CNMOPS.chr15_nul)
chr16.CNVR_nul <- cnvr(CNMOPS.chr16_nul)
chr17.CNVR_nul <- cnvr(CNMOPS.chr17_nul)
chr18.CNVR_nul <- cnvr(CNMOPS.chr18_nul) # NO CNV Detected
chr19.CNVR_nul <- cnvr(CNMOPS.chr19_nul)
chr20.CNVR_nul <- cnvr(CNMOPS.chr20_nul) # No CNV Detected
chr21.CNVR_nul <- cnvr(CNMOPS.chr21_nul)
chr22.CNVR_nul <- cnvr(CNMOPS.chr22_nul)
chrX.CNVR_nul <- cnvr(CNMOPS.chrX_nul)

# CNVs Nulliparous
chr1.CNVs_nul <- cnvs(CNMOPS.chr1_nul)
chr2.CNVs_nul <- cnvs(CNMOPS.chr2_nul)
chr3.CNVs_nul <- cnvs(CNMOPS.chr3_nul)
chr4.CNVs_nul <- cnvs(CNMOPS.chr4_nul)
chr5.CNVs_nul <- cnvs(CNMOPS.chr5_nul)
chr6.CNVs_nul <- cnvs(CNMOPS.chr6_nul)
chr7.CNVs_nul <- cnvs(CNMOPS.chr7_nul)
chr8.CNVs_nul <- cnvs(CNMOPS.chr8_nul)
chr9.CNVs_nul <- cnvs(CNMOPS.chr9_nul)
chr10.CNVs_nul <- cnvs(CNMOPS.chr10_nul)
chr11.CNVs_nul <- cnvs(CNMOPS.chr11_nul)
chr12.CNVs_nul <- cnvs(CNMOPS.chr12_nul)
chr13.CNVs_nul <- cnvs(CNMOPS.chr13_nul) # NO CNV Detected
chr14.CNVs_nul <- cnvs(CNMOPS.chr14_nul)
chr15.CNVs_nul <- cnvs(CNMOPS.chr15_nul)
chr16.CNVs_nul <- cnvs(CNMOPS.chr16_nul)
chr17.CNVs_nul <- cnvs(CNMOPS.chr17_nul)
chr18.CNVs_nul <- cnvs(CNMOPS.chr18_nul) # NO CNV Detected
chr19.CNVs_nul <- cnvs(CNMOPS.chr19_nul)
chr20.CNVs_nul <- cnvs(CNMOPS.chr20_nul) # No CNV Detected
chr21.CNVs_nul <- cnvs(CNMOPS.chr21_nul)
chr22.CNVs_nul <- cnvs(CNMOPS.chr22_nul)
chrX.CNVs_nul <- cnvs(CNMOPS.chrX_nul)

###########################################################################
###########################################################################

# CNVs in stromal compartment
# case = stroma, control = epithelium
# Chromosome 1: Parous - Stroma
# Parous

# Chromosome 1: Parous - Stroma
ref_anlysis.chr1_par_stroma <- referencecn.mops(cases = bamDataRanges.chr1[,c("b34","BB28","DD30","f38","S42","S60",
                                                                              "S62","S64","S68","S72","FF32","H8",
                                                                              "J10","L12","N14","P16","T20")],
                                                control = bamDataRanges.chr1[,c("a33","AA27","CC29","e37","E41","E59",
                                                                                "E61","E63","E67","E71","EE31","G7",
                                                                                "I9","K11","M13","O15","S19")],
                                                norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                                classes = paste("CN",c(0:8,16,32,64,128), sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 2: Parous - Stroma
ref_anlysis.chr2_par_stroma <- referencecn.mops(cases = bamDataRanges.chr2[,c("b34","BB28","DD30","f38","S42","S60",
                                                                              "S62","S64","S68","S72","FF32","H8",
                                                                              "J10","L12","N14","P16","T20")],
                                                control = bamDataRanges.chr2[,c("a33","AA27","CC29","e37","E41","E59",
                                                                                "E61","E63","E67","E71","EE31","G7",
                                                                                "I9","K11","M13","O15","S19")],
                                                norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                                classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)
# Chromosome 3: Parous - Stroma
ref_anlysis.chr3_par_stroma <- referencecn.mops(cases = bamDataRanges.chr3[,c("b34","BB28","DD30","f38","S42","S60",
                                                                              "S62","S64","S68","S72","FF32","H8",
                                                                              "J10","L12","N14","P16","T20")],
                                                control = bamDataRanges.chr3[,c("a33","AA27","CC29","e37","E41","E59",
                                                                                "E61","E63","E67","E71","EE31","G7",
                                                                                "I9","K11","M13","O15","S19")],
                                                norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                                classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)
# Chromosome 4: Parous - Stroma
ref_anlysis.chr4_par_stroma <- referencecn.mops(cases = bamDataRanges.chr4[,c("b34","BB28","DD30","f38","S42","S60",
                                                                              "S62","S64","S68","S72","FF32","H8",
                                                                              "J10","L12","N14","P16","T20")],
                                                control = bamDataRanges.chr4[,c("a33","AA27","CC29","e37","E41","E59",
                                                                                "E61","E63","E67","E71","EE31","G7",
                                                                                "I9","K11","M13","O15","S19")],
                                                norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                                classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)
# Chromosome 5: Parous - Stroma
ref_anlysis.chr5_par_stroma <- referencecn.mops(cases = bamDataRanges.chr5[,c("b34","BB28","DD30","f38","S42","S60",
                                                                              "S62","S64","S68","S72","FF32","H8",
                                                                              "J10","L12","N14","P16","T20")],
                                                control = bamDataRanges.chr5[,c("a33","AA27","CC29","e37","E41","E59",
                                                                                "E61","E63","E67","E71","EE31","G7",
                                                                                "I9","K11","M13","O15","S19")],
                                                norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                                classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)
# Chromosome 6: Parous - Stroma
ref_anlysis.chr6_par_stroma <- referencecn.mops(cases = bamDataRanges.chr6[,c("b34","BB28","DD30","f38","S42","S60",
                                                                              "S62","S64","S68","S72","FF32","H8",
                                                                              "J10","L12","N14","P16","T20")],
                                                control = bamDataRanges.chr6[,c("a33","AA27","CC29","e37","E41","E59",
                                                                                "E61","E63","E67","E71","EE31","G7",
                                                                                "I9","K11","M13","O15","S19")],
                                                norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                                classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)
# Chromosome 7: Parous - Stroma
ref_anlysis.chr7_par_stroma <- referencecn.mops(cases = bamDataRanges.chr7[,c("b34","BB28","DD30","f38","S42","S60",
                                                                              "S62","S64","S68","S72","FF32","H8",
                                                                              "J10","L12","N14","P16","T20")],
                                                control = bamDataRanges.chr7[,c("a33","AA27","CC29","e37","E41","E59",
                                                                                "E61","E63","E67","E71","EE31","G7",
                                                                                "I9","K11","M13","O15","S19")],
                                                norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                                classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)
# Chromosome 8: Parous - Stroma
ref_anlysis.chr8_par_stroma <- referencecn.mops(cases = bamDataRanges.chr8[,c("b34","BB28","DD30","f38","S42","S60",
                                                                              "S62","S64","S68","S72","FF32","H8",
                                                                              "J10","L12","N14","P16","T20")],
                                                control = bamDataRanges.chr8[,c("a33","AA27","CC29","e37","E41","E59",
                                                                                "E61","E63","E67","E71","EE31","G7",
                                                                                "I9","K11","M13","O15","S19")],
                                                norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                                classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)
# Chromosome 9: Parous - Stroma
ref_anlysis.chr9_par_stroma <- referencecn.mops(cases = bamDataRanges.chr9[,c("b34","BB28","DD30","f38","S42","S60",
                                                                              "S62","S64","S68","S72","FF32","H8",
                                                                              "J10","L12","N14","P16","T20")],
                                                control = bamDataRanges.chr9[,c("a33","AA27","CC29","e37","E41","E59",
                                                                                "E61","E63","E67","E71","EE31","G7",
                                                                                "I9","K11","M13","O15","S19")],
                                                norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                                classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)
# Chromosome 10: Parous - Stroma
ref_anlysis.chr10_par_stroma <- referencecn.mops(cases = bamDataRanges.chr10[,c("b34","BB28","DD30","f38","S42","S60",
                                                                                "S62","S64","S68","S72","FF32","H8",
                                                                                "J10","L12","N14","P16","T20")],
                                                 control = bamDataRanges.chr10[,c("a33","AA27","CC29","e37","E41","E59",
                                                                                  "E61","E63","E67","E71","EE31","G7",
                                                                                  "I9","K11","M13","O15","S19")],
                                                 norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                                 classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)
# Chromosome 11: Parous - Stroma
ref_anlysis.chr11_par_stroma <- referencecn.mops(cases = bamDataRanges.chr11[,c("b34","BB28","DD30","f38","S42","S60",
                                                                                "S62","S64","S68","S72","FF32","H8",
                                                                                "J10","L12","N14","P16","T20")],
                                                 control = bamDataRanges.chr11[,c("a33","AA27","CC29","e37","E41","E59",
                                                                                  "E61","E63","E67","E71","EE31","G7",
                                                                                  "I9","K11","M13","O15","S19")],
                                                 norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                                 classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)
# Chromosome 12: Parous - Stroma
ref_anlysis.chr12_par_stroma <- referencecn.mops(cases = bamDataRanges.chr12[,c("b34","BB28","DD30","f38","S42","S60",
                                                                                "S62","S64","S68","S72","FF32","H8",
                                                                                "J10","L12","N14","P16","T20")],
                                                 control = bamDataRanges.chr12[,c("a33","AA27","CC29","e37","E41","E59",
                                                                                  "E61","E63","E67","E71","EE31","G7",
                                                                                  "I9","K11","M13","O15","S19")],
                                                 norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                                 classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)
# Chromosome 13: Parous - Stroma
ref_anlysis.chr13_par_stroma <- referencecn.mops(cases = bamDataRanges.chr13[,c("b34","BB28","DD30","f38","S42","S60",
                                                                                "S62","S64","S68","S72","FF32","H8",
                                                                                "J10","L12","N14","P16","T20")],
                                                 control = bamDataRanges.chr13[,c("a33","AA27","CC29","e37","E41","E59",
                                                                                  "E61","E63","E67","E71","EE31","G7",
                                                                                  "I9","K11","M13","O15","S19")],
                                                 norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                                 classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)
# Chromosome 14: Parous - Stroma
ref_anlysis.chr14_par_stroma <- referencecn.mops(cases = bamDataRanges.chr14[,c("b34","BB28","DD30","f38","S42","S60",
                                                                                "S62","S64","S68","S72","FF32","H8",
                                                                                "J10","L12","N14","P16","T20")],
                                                 control = bamDataRanges.chr14[,c("a33","AA27","CC29","e37","E41","E59",
                                                                                  "E61","E63","E67","E71","EE31","G7",
                                                                                  "I9","K11","M13","O15","S19")],
                                                 norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                                 classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)
# Chromosome 15: Parous - Stroma
ref_anlysis.chr15_par_stroma <- referencecn.mops(cases = bamDataRanges.chr15[,c("b34","BB28","DD30","f38","S42","S60",
                                                                                "S62","S64","S68","S72","FF32","H8",
                                                                                "J10","L12","N14","P16","T20")],
                                                 control = bamDataRanges.chr15[,c("a33","AA27","CC29","e37","E41","E59",
                                                                                  "E61","E63","E67","E71","EE31","G7",
                                                                                  "I9","K11","M13","O15","S19")],
                                                 norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                                 classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)
# Chromosome 16: Parous - Stroma
ref_anlysis.chr16_par_stroma <- referencecn.mops(cases = bamDataRanges.chr16[,c("b34","BB28","DD30","f38","S42","S60",
                                                                                "S62","S64","S68","S72","FF32","H8",
                                                                                "J10","L12","N14","P16","T20")],
                                                 control = bamDataRanges.chr16[,c("a33","AA27","CC29","e37","E41","E59",
                                                                                  "E61","E63","E67","E71","EE31","G7",
                                                                                  "I9","K11","M13","O15","S19")],
                                                 norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                                 classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)
# Chromosome 17: Parous - Stroma
ref_anlysis.chr17_par_stroma <- referencecn.mops(cases = bamDataRanges.chr17[,c("b34","BB28","DD30","f38","S42","S60",
                                                                                "S62","S64","S68","S72","FF32","H8",
                                                                                "J10","L12","N14","P16","T20")],
                                                 control = bamDataRanges.chr17[,c("a33","AA27","CC29","e37","E41","E59",
                                                                                  "E61","E63","E67","E71","EE31","G7",
                                                                                  "I9","K11","M13","O15","S19")],
                                                 norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                                 classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)
# Chromosome 18: Parous - Stroma
ref_anlysis.chr18_par_stroma <- referencecn.mops(cases = bamDataRanges.chr18[,c("b34","BB28","DD30","f38","S42","S60",
                                                                                "S62","S64","S68","S72","FF32","H8",
                                                                                "J10","L12","N14","P16","T20")],
                                                 control = bamDataRanges.chr18[,c("a33","AA27","CC29","e37","E41","E59",
                                                                                  "E61","E63","E67","E71","EE31","G7",
                                                                                  "I9","K11","M13","O15","S19")],
                                                 norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                                 classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 19: Parous - Stroma
ref_anlysis.chr19_par_stroma <- referencecn.mops(cases = bamDataRanges.chr19[,c("b34","BB28","DD30","f38","S42","S60",
                                                                                "S62","S64","S68","S72","FF32","H8",
                                                                                "J10","L12","N14","P16","T20")],
                                                 control = bamDataRanges.chr19[,c("a33","AA27","CC29","e37","E41","E59",
                                                                                  "E61","E63","E67","E71","EE31","G7",
                                                                                  "I9","K11","M13","O15","S19")],
                                                 norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                                 classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 20: Parous - Stroma
ref_anlysis.chr20_par_stroma <- referencecn.mops(cases = bamDataRanges.chr20[,c("b34","BB28","DD30","f38","S42",
                                                                                "S62","S64","S68","S72","FF32","H8",
                                                                                "J10","L12","N14","P16","T20")],
                                                 control = bamDataRanges.chr20[,c("a33","AA27","CC29","e37","E41",
                                                                                  "E61","E63","E67","E71","EE31","G7",
                                                                                  "I9","K11","M13","O15","S19")],
                                                 norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                                 classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 21: Parous - Stroma
ref_anlysis.chr21_par_stroma <- referencecn.mops(cases = bamDataRanges.chr21[,c("b34","BB28","DD30","f38","S42",
                                                                                "S62","S64","S68","S72","FF32","H8",
                                                                                "J10","L12","N14","P16","T20")],
                                                 control = bamDataRanges.chr21[,c("a33","AA27","CC29","e37","E41",
                                                                                  "E61","E63","E67","E71","EE31","G7",
                                                                                  "I9","K11","M13","O15","S19")],
                                                 norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                                 classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 22: Parous - Stroma
ref_anlysis.chr22_par_stroma <- referencecn.mops(cases = bamDataRanges.chr22[,c("b34","BB28","DD30","f38","S42",
                                                                                "S62","S68","S72","FF32","H8",
                                                                                "J10","L12","N14","P16","T20")],
                                                 control = bamDataRanges.chr22[,c("a33","AA27","CC29","e37","E41",
                                                                                  "E61","E67","E71","EE31","G7",
                                                                                  "I9","K11","M13","O15","S19")],
                                                 norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                                 classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome X: Parous - Stroma
ref_anlysis.chrX_par_stroma <- referencecn.mops(cases = bamDataRanges.chrX[,c("b34","BB28","DD30","f38","S42","S60",
                                                                              "S62","S64","S68","S72","FF32","H8",
                                                                              "J10","L12","N14","P16","T20")],
                                                control = bamDataRanges.chrX[,c("a33","AA27","CC29","e37","E41","E59",
                                                                                "E61","E63","E67","E71","EE31","G7",
                                                                                "I9","K11","M13","O15","S19")],
                                                norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                                classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Stroma: CNV counting Nulliparous
CNMOPS.chr1_par_stroma <- calcIntegerCopyNumbers(ref_anlysis.chr1_par_stroma)
CNMOPS.chr2_par_stroma <- calcIntegerCopyNumbers(ref_anlysis.chr2_par_stroma)
CNMOPS.chr3_par_stroma <- calcIntegerCopyNumbers(ref_anlysis.chr3_par_stroma)
CNMOPS.chr4_par_stroma <- calcIntegerCopyNumbers(ref_anlysis.chr4_par_stroma)
CNMOPS.chr5_par_stroma <- calcIntegerCopyNumbers(ref_anlysis.chr5_par_stroma)
CNMOPS.chr6_par_stroma <- calcIntegerCopyNumbers(ref_anlysis.chr6_par_stroma)
CNMOPS.chr7_par_stroma <- calcIntegerCopyNumbers(ref_anlysis.chr7_par_stroma)
CNMOPS.chr8_par_stroma <- calcIntegerCopyNumbers(ref_anlysis.chr8_par_stroma)
CNMOPS.chr9_par_stroma <- calcIntegerCopyNumbers(ref_anlysis.chr9_par_stroma)
CNMOPS.chr10_par_stroma <- calcIntegerCopyNumbers(ref_anlysis.chr10_par_stroma)
CNMOPS.chr11_par_stroma <- calcIntegerCopyNumbers(ref_anlysis.chr11_par_stroma)
CNMOPS.chr12_par_stroma <- calcIntegerCopyNumbers(ref_anlysis.chr12_par_stroma)
CNMOPS.chr13_par_stroma <- calcIntegerCopyNumbers(ref_anlysis.chr13_par_stroma)
CNMOPS.chr14_par_stroma <- calcIntegerCopyNumbers(ref_anlysis.chr14_par_stroma)
CNMOPS.chr15_par_stroma <- calcIntegerCopyNumbers(ref_anlysis.chr15_par_stroma)
CNMOPS.chr16_par_stroma <- calcIntegerCopyNumbers(ref_anlysis.chr16_par_stroma)
CNMOPS.chr17_par_stroma <- calcIntegerCopyNumbers(ref_anlysis.chr17_par_stroma)
CNMOPS.chr18_par_stroma <- calcIntegerCopyNumbers(ref_anlysis.chr18_par_stroma)
CNMOPS.chr19_par_stroma <- calcIntegerCopyNumbers(ref_anlysis.chr19_par_stroma)
CNMOPS.chr20_par_stroma <- calcIntegerCopyNumbers(ref_anlysis.chr20_par_stroma) # No CNV detected
CNMOPS.chr21_par_stroma <- calcIntegerCopyNumbers(ref_anlysis.chr21_par_stroma)
CNMOPS.chr22_par_stroma <- calcIntegerCopyNumbers(ref_anlysis.chr22_par_stroma)
CNMOPS.chrX_par_stroma <- calcIntegerCopyNumbers(ref_anlysis.chrX_par_stroma)

# Stroma CNVRs nulliparous (stroma vs epithelium)
chr1.CNVR_par_stroma <- cnvr(CNMOPS.chr1_par_stroma)
chr2.CNVR_par_stroma <- cnvr(CNMOPS.chr2_par_stroma)
chr3.CNVR_par_stroma <- cnvr(CNMOPS.chr3_par_stroma)
chr4.CNVR_par_stroma <- cnvr(CNMOPS.chr4_par_stroma)
chr5.CNVR_par_stroma <- cnvr(CNMOPS.chr5_par_stroma)
chr6.CNVR_par_stroma <- cnvr(CNMOPS.chr6_par_stroma)
chr7.CNVR_par_stroma <- cnvr(CNMOPS.chr7_par_stroma)
chr8.CNVR_par_stroma <- cnvr(CNMOPS.chr8_par_stroma)
chr9.CNVR_par_stroma <- cnvr(CNMOPS.chr9_par_stroma)
chr10.CNVR_par_stroma <- cnvr(CNMOPS.chr10_par_stroma)
chr11.CNVR_par_stroma <- cnvr(CNMOPS.chr11_par_stroma)
chr12.CNVR_par_stroma <- cnvr(CNMOPS.chr12_par_stroma)
chr13.CNVR_par_stroma <- cnvr(CNMOPS.chr13_par_stroma)
chr14.CNVR_par_stroma <- cnvr(CNMOPS.chr14_par_stroma)
chr15.CNVR_par_stroma <- cnvr(CNMOPS.chr15_par_stroma)
chr16.CNVR_par_stroma <- cnvr(CNMOPS.chr16_par_stroma)
chr17.CNVR_par_stroma <- cnvr(CNMOPS.chr17_par_stroma)
chr18.CNVR_par_stroma <- cnvr(CNMOPS.chr18_par_stroma)
chr19.CNVR_par_stroma <- cnvr(CNMOPS.chr19_par_stroma)
chr20.CNVR_par_stroma <- cnvr(CNMOPS.chr20_par_stroma) # No CNV detected
chr21.CNVR_par_stroma <- cnvr(CNMOPS.chr21_par_stroma)
chr22.CNVR_par_stroma <- cnvr(CNMOPS.chr22_par_stroma)
chrX.CNVR_par_stroma <- cnvr(CNMOPS.chrX_par_stroma)

# Stroma CNVs nulliparous (epithelial and controls)
chr1.CNVs_par_stroma <- cnvs(CNMOPS.chr1_par_stroma)
chr2.CNVs_par_stroma <- cnvs(CNMOPS.chr2_par_stroma)
chr3.CNVs_par_stroma <- cnvs(CNMOPS.chr3_par_stroma)
chr4.CNVs_par_stroma <- cnvs(CNMOPS.chr4_par_stroma)
chr5.CNVs_par_stroma <- cnvs(CNMOPS.chr5_par_stroma)
chr6.CNVs_par_stroma <- cnvs(CNMOPS.chr6_par_stroma)
chr7.CNVs_par_stroma <- cnvs(CNMOPS.chr7_par_stroma)
chr8.CNVs_par_stroma <- cnvs(CNMOPS.chr8_par_stroma)
chr9.CNVs_par_stroma <- cnvs(CNMOPS.chr9_par_stroma)
chr10.CNVs_par_stroma <- cnvs(CNMOPS.chr10_par_stroma)
chr11.CNVs_par_stroma <- cnvs(CNMOPS.chr11_par_stroma)
chr12.CNVs_par_stroma <- cnvs(CNMOPS.chr12_par_stroma)
chr13.CNVs_par_stroma <- cnvs(CNMOPS.chr13_par_stroma)
chr14.CNVs_par_stroma <- cnvs(CNMOPS.chr14_par_stroma)
chr15.CNVs_par_stroma <- cnvs(CNMOPS.chr15_par_stroma)
chr16.CNVs_par_stroma <- cnvs(CNMOPS.chr16_par_stroma)
chr17.CNVs_par_stroma <- cnvs(CNMOPS.chr17_par_stroma)
chr18.CNVs_par_stroma <- cnvs(CNMOPS.chr18_par_stroma)
chr19.CNVs_par_stroma <- cnvs(CNMOPS.chr19_par_stroma)
chr20.CNVs_par_stroma <- cnvs(CNMOPS.chr20_par_stroma) # No CNV detected
chr21.CNVs_par_stroma <- cnvs(CNMOPS.chr21_par_stroma)
chr22.CNVs_par_stroma <- cnvs(CNMOPS.chr22_par_stroma)
chrX.CNVs_par_stroma <- cnvs(CNMOPS.chrX_par_stroma)

###########################################################################
###########################################################################

# Nulliparous
# Chromosome 1: Nulliparous - Stroma
ref_anlysis.chr1_nul_stroma <- referencecn.mops(case = bamDataRanges.chr1[,c("B2","D4","d36","F6","S66","S76","S78",
                                                                             "h40","R18","V22","X24","Z26")],
                                                control = bamDataRanges.chr1[,c("A1","C3","c35","E5","E65","E75","E77",
                                                                                "g39","Q17","U21","W23","Y25")],
                                                norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                                classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)
# Chromosome 2: Nulliparous - Stroma
ref_anlysis.chr2_nul_stroma <- referencecn.mops(case = bamDataRanges.chr2[,c("B2","D4","d36","F6","S66","S76","S78",
                                                                             "h40","R18","V22","X24","Z26")],
                                                control = bamDataRanges.chr2[,c("A1","C3","c35","E5","E65","E75","E77",
                                                                                "g39","Q17","U21","W23","Y25")],
                                                norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                                classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)
# Chromosome 3: Nulliparous - Stroma
ref_anlysis.chr3_nul_stroma <- referencecn.mops(case = bamDataRanges.chr3[,c("B2","D4","d36","F6","S66","S76","S78",
                                                                             "h40","R18","V22","X24","Z26")],
                                                control = bamDataRanges.chr3[,c("A1","C3","c35","E5","E65","E75","E77",
                                                                                "g39","Q17","U21","W23","Y25")],
                                                norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                                classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)
# Chromosome 4: Nulliparous - Stroma
ref_anlysis.chr4_nul_stroma <- referencecn.mops(case = bamDataRanges.chr4[,c("B2","D4","d36","F6","S66","S76","S78",
                                                                             "h40","R18","V22","X24","Z26")],
                                                control = bamDataRanges.chr4[,c("A1","C3","c35","E5","E65","E75","E77",
                                                                                "g39","Q17","U21","W23","Y25")],
                                                norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                                classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 5: Nulliparous - Stroma
ref_anlysis.chr5_nul_stroma <- referencecn.mops(case = bamDataRanges.chr5[,c("B2","D4","d36","F6","S66","S76","S78",
                                                                             "h40","R18","V22","X24","Z26")],
                                                control = bamDataRanges.chr5[,c("A1","C3","c35","E5","E65","E75","E77",
                                                                                "g39","Q17","U21","W23","Y25")],
                                                norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                                classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 6: Nulliparous - Stroma
ref_anlysis.chr6_nul_stroma <- referencecn.mops(case = bamDataRanges.chr6[,c("B2","D4","d36","F6","S66","S76","S78",
                                                                             "h40","R18","V22","X24","Z26")],
                                                control = bamDataRanges.chr6[,c("A1","C3","c35","E5","E65","E75","E77",
                                                                                "g39","Q17","U21","W23","Y25")],
                                                norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                                classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 7: Nulliparous - Stroma
ref_anlysis.chr7_nul_stroma <- referencecn.mops(case = bamDataRanges.chr7[,c("B2","D4","d36","F6","S66","S76","S78",
                                                                             "h40","R18","V22","X24","Z26")],
                                                control = bamDataRanges.chr7[,c("A1","C3","c35","E5","E65","E75","E77",
                                                                                "g39","Q17","U21","W23","Y25")],
                                                norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                                classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 8: Nulliparous - Stroma
ref_anlysis.chr8_nul_stroma <- referencecn.mops(case = bamDataRanges.chr8[,c("B2","D4","d36","F6","S66","S76","S78",
                                                                             "h40","R18","V22","X24","Z26")],
                                                control = bamDataRanges.chr8[,c("A1","C3","c35","E5","E65","E75","E77",
                                                                                "g39","Q17","U21","W23","Y25")],
                                                norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                                classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 9: Nulliparous - Stroma
ref_anlysis.chr9_nul_stroma <- referencecn.mops(case = bamDataRanges.chr9[,c("B2","D4","d36","F6","S66","S76","S78",
                                                                             "h40","R18","V22","X24","Z26")],
                                                control = bamDataRanges.chr9[,c("A1","C3","c35","E5","E65","E75","E77",
                                                                                "g39","Q17","U21","W23","Y25")],
                                                norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                                classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 10: Nulliparous - Stroma
ref_anlysis.chr10_nul_stroma <- referencecn.mops(case = bamDataRanges.chr10[,c("B2","D4","d36","F6","S66","S76","S78",
                                                                               "h40","R18","V22","X24","Z26")],
                                                 control = bamDataRanges.chr10[,c("A1","C3","c35","E5","E65","E75","E77",
                                                                                  "g39","Q17","U21","W23","Y25")],
                                                 norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                                 classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 11: Nulliparous - Stroma
ref_anlysis.chr11_nul_stroma <- referencecn.mops(case = bamDataRanges.chr11[,c("B2","D4","d36","F6","S66","S76","S78",
                                                                               "h40","R18","V22","X24","Z26")],
                                                 control = bamDataRanges.chr11[,c("A1","C3","c35","E5","E65","E75","E77",
                                                                                  "g39","Q17","U21","W23","Y25")],
                                                 norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                                 classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 12: Nulliparous - Stroma
ref_anlysis.chr12_nul_stroma <- referencecn.mops(case = bamDataRanges.chr12[,c("B2","D4","d36","F6","S66","S76","S78",
                                                                               "h40","R18","V22","X24","Z26")],
                                                 control = bamDataRanges.chr12[,c("A1","C3","c35","E5","E65","E75","E77",
                                                                                  "g39","Q17","U21","W23","Y25")],
                                                 norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                                 classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 13: Nulliparous - Stroma
ref_anlysis.chr13_nul_stroma <- referencecn.mops(case = bamDataRanges.chr13[,c("B2","D4","d36","F6","S66","S76","S78",
                                                                               "h40","R18","V22","X24","Z26")],
                                                 control = bamDataRanges.chr13[,c("A1","C3","c35","E5","E65","E75","E77",
                                                                                  "g39","Q17","U21","W23","Y25")],
                                                 norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                                 classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 14: Nulliparous - Stroma
ref_anlysis.chr14_nul_stroma <- referencecn.mops(case = bamDataRanges.chr14[,c("B2","D4","d36","F6","S66","S76","S78",
                                                                               "h40","R18","V22","X24","Z26")],
                                                 control = bamDataRanges.chr14[,c("A1","C3","c35","E5","E65","E75","E77",
                                                                                  "g39","Q17","U21","W23","Y25")],
                                                 norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                                 classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 15: Nulliparous - Stroma
ref_anlysis.chr15_nul_stroma <- referencecn.mops(case = bamDataRanges.chr15[,c("B2","D4","d36","F6","S66","S76","S78",
                                                                               "h40","R18","V22","X24","Z26")],
                                                 control = bamDataRanges.chr15[,c("A1","C3","c35","E5","E65","E75","E77",
                                                                                  "g39","Q17","U21","W23","Y25")],
                                                 norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                                 classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 16: Nulliparous - Stroma
ref_anlysis.chr16_nul_stroma <- referencecn.mops(case = bamDataRanges.chr16[,c("B2","D4","d36","F6","S66","S76","S78",
                                                                               "h40","R18","V22","X24","Z26")],
                                                 control = bamDataRanges.chr16[,c("A1","C3","c35","E5","E65","E75","E77",
                                                                                  "g39","Q17","U21","W23","Y25")],
                                                 norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                                 classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 17: Nulliparous - Stroma
ref_anlysis.chr17_nul_stroma <- referencecn.mops(case = bamDataRanges.chr17[,c("B2","D4","d36","F6","S66","S76","S78",
                                                                               "h40","R18","V22","X24","Z26")],
                                                 control = bamDataRanges.chr17[,c("A1","C3","c35","E5","E65","E75","E77",
                                                                                  "g39","Q17","U21","W23","Y25")],
                                                 norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                                 classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 18: Nulliparous - Stroma
ref_anlysis.chr18_nul_stroma <- referencecn.mops(case = bamDataRanges.chr18[,c("B2","D4","d36","F6","S66","S76","S78",
                                                                               "h40","R18","V22","X24","Z26")],
                                                 control = bamDataRanges.chr18[,c("A1","C3","c35","E5","E65","E75","E77",
                                                                                  "g39","Q17","U21","W23","Y25")],
                                                 norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                                 classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 19: Nulliparous - Stroma
ref_anlysis.chr19_nul_stroma <- referencecn.mops(case = bamDataRanges.chr19[,c("B2","D4","d36","F6","S66","S76","S78",
                                                                               "h40","R18","V22","X24","Z26")],
                                                 control = bamDataRanges.chr19[,c("A1","C3","c35","E5","E65","E75","E77",
                                                                                  "g39","Q17","U21","W23","Y25")],
                                                 norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                                 classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 20: Nulliparous - Stroma
ref_anlysis.chr20_nul_stroma <- referencecn.mops(case = bamDataRanges.chr20[,c("B2","D4","d36","F6","S66","S76","S78",
                                                                               "h40","R18","V22","X24","Z26")],
                                                 control = bamDataRanges.chr20[,c("A1","C3","c35","E5","E65","E75","E77",
                                                                                  "g39","Q17","U21","W23","Y25")],
                                                 norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                                 classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)
# Chromosome 21: Nulliparous - Stroma
ref_anlysis.chr21_nul_stroma <- referencecn.mops(case = bamDataRanges.chr21[,c("B2","D4","d36","F6","S66","S76","S78",
                                                                               "h40","R18","V22","X24","Z26")],
                                                 control = bamDataRanges.chr21[,c("A1","C3","c35","E5","E65","E75","E77",
                                                                                  "g39","Q17","U21","W23","Y25")],
                                                 norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                                 classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome 22: Nulliparous - Stroma
ref_anlysis.chr22_nul_stroma <- referencecn.mops(case = bamDataRanges.chr22[,c("B2","D4","d36","F6","S66","S76","S78",
                                                                               "h40","R18","V22","X24","Z26")],
                                                 control = bamDataRanges.chr22[,c("A1","C3","c35","E5","E65","E75","E77",
                                                                                  "g39","Q17","U21","W23","Y25")],
                                                 norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                                 classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Chromosome X: Nulliparous - Stroma
ref_anlysis.chrX_nul_stroma <- referencecn.mops(case = bamDataRanges.chrX[,c("B2","D4","d36","F6","S66","S76","S78",
                                                                             "h40","R18","V22","X24","Z26")],
                                                control = bamDataRanges.chrX[,c("A1","C3","c35","E5","E65","E75","E77",
                                                                                "g39","Q17","U21","W23","Y25")],
                                                norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                                classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)

# Stroma: CNV counting Nulliparous
CNMOPS.chr1_nul_stroma <- calcIntegerCopyNumbers(ref_anlysis.chr1_nul_stroma)
CNMOPS.chr2_nul_stroma <- calcIntegerCopyNumbers(ref_anlysis.chr2_nul_stroma)
CNMOPS.chr3_nul_stroma <- calcIntegerCopyNumbers(ref_anlysis.chr3_nul_stroma)
CNMOPS.chr4_nul_stroma <- calcIntegerCopyNumbers(ref_anlysis.chr4_nul_stroma)
CNMOPS.chr5_nul_stroma <- calcIntegerCopyNumbers(ref_anlysis.chr5_nul_stroma)
CNMOPS.chr6_nul_stroma <- calcIntegerCopyNumbers(ref_anlysis.chr6_nul_stroma)
CNMOPS.chr7_nul_stroma <- calcIntegerCopyNumbers(ref_anlysis.chr7_nul_stroma)
CNMOPS.chr8_nul_stroma <- calcIntegerCopyNumbers(ref_anlysis.chr8_nul_stroma)
CNMOPS.chr9_nul_stroma <- calcIntegerCopyNumbers(ref_anlysis.chr9_nul_stroma)
CNMOPS.chr10_nul_stroma <- calcIntegerCopyNumbers(ref_anlysis.chr10_nul_stroma)
CNMOPS.chr11_nul_stroma <- calcIntegerCopyNumbers(ref_anlysis.chr11_nul_stroma)
CNMOPS.chr12_nul_stroma <- calcIntegerCopyNumbers(ref_anlysis.chr12_nul_stroma)
CNMOPS.chr13_nul_stroma <- calcIntegerCopyNumbers(ref_anlysis.chr13_nul_stroma)
CNMOPS.chr14_nul_stroma <- calcIntegerCopyNumbers(ref_anlysis.chr14_nul_stroma)
CNMOPS.chr15_nul_stroma <- calcIntegerCopyNumbers(ref_anlysis.chr15_nul_stroma)
CNMOPS.chr16_nul_stroma <- calcIntegerCopyNumbers(ref_anlysis.chr16_nul_stroma)
CNMOPS.chr17_nul_stroma <- calcIntegerCopyNumbers(ref_anlysis.chr17_nul_stroma)
CNMOPS.chr18_nul_stroma <- calcIntegerCopyNumbers(ref_anlysis.chr18_nul_stroma)
CNMOPS.chr19_nul_stroma <- calcIntegerCopyNumbers(ref_anlysis.chr19_nul_stroma)
CNMOPS.chr20_nul_stroma <- calcIntegerCopyNumbers(ref_anlysis.chr20_nul_stroma)
CNMOPS.chr21_nul_stroma <- calcIntegerCopyNumbers(ref_anlysis.chr21_nul_stroma)
CNMOPS.chr22_nul_stroma <- calcIntegerCopyNumbers(ref_anlysis.chr22_nul_stroma)
CNMOPS.chrX_nul_stroma <- calcIntegerCopyNumbers(ref_anlysis.chrX_nul_stroma)

# Stroma CNVRs Nulliparous (stroma vs epithelium)
chr1.CNVR_nul_stroma <- cnvr(CNMOPS.chr1_nul_stroma)
chr2.CNVR_nul_stroma <- cnvr(CNMOPS.chr2_nul_stroma)
chr3.CNVR_nul_stroma <- cnvr(CNMOPS.chr3_nul_stroma)
chr4.CNVR_nul_stroma <- cnvr(CNMOPS.chr4_nul_stroma)
chr5.CNVR_nul_stroma <- cnvr(CNMOPS.chr5_nul_stroma)
chr6.CNVR_nul_stroma <- cnvr(CNMOPS.chr6_nul_stroma)
chr7.CNVR_nul_stroma <- cnvr(CNMOPS.chr7_nul_stroma)
chr8.CNVR_nul_stroma <- cnvr(CNMOPS.chr8_nul_stroma)
chr9.CNVR_nul_stroma <- cnvr(CNMOPS.chr9_nul_stroma)
chr10.CNVR_nul_stroma <- cnvr(CNMOPS.chr10_nul_stroma)
chr11.CNVR_nul_stroma <- cnvr(CNMOPS.chr11_nul_stroma)
chr12.CNVR_nul_stroma <- cnvr(CNMOPS.chr12_nul_stroma)
chr13.CNVR_nul_stroma <- cnvr(CNMOPS.chr13_nul_stroma)
chr14.CNVR_nul_stroma <- cnvr(CNMOPS.chr14_nul_stroma)
chr15.CNVR_nul_stroma <- cnvr(CNMOPS.chr15_nul_stroma)
chr16.CNVR_nul_stroma <- cnvr(CNMOPS.chr16_nul_stroma)
chr17.CNVR_nul_stroma <- cnvr(CNMOPS.chr17_nul_stroma)
chr18.CNVR_nul_stroma <- cnvr(CNMOPS.chr18_nul_stroma)
chr19.CNVR_nul_stroma <- cnvr(CNMOPS.chr19_nul_stroma)
chr20.CNVR_nul_stroma <- cnvr(CNMOPS.chr20_nul_stroma)
chr21.CNVR_nul_stroma <- cnvr(CNMOPS.chr21_nul_stroma)
chr22.CNVR_nul_stroma <- cnvr(CNMOPS.chr22_nul_stroma)
chrX.CNVR_nul_stroma <- cnvr(CNMOPS.chrX_nul_stroma)

# Stroma CNVs Nulliparous (epithelial and controls)
chr1.CNVs_nul_stroma <- cnvs(CNMOPS.chr1_nul_stroma)
chr2.CNVs_nul_stroma <- cnvs(CNMOPS.chr2_nul_stroma)
chr3.CNVs_nul_stroma <- cnvs(CNMOPS.chr3_nul_stroma)
chr4.CNVs_nul_stroma <- cnvs(CNMOPS.chr4_nul_stroma)
chr5.CNVs_nul_stroma <- cnvs(CNMOPS.chr5_nul_stroma)
chr6.CNVs_nul_stroma <- cnvs(CNMOPS.chr6_nul_stroma)
chr7.CNVs_nul_stroma <- cnvs(CNMOPS.chr7_nul_stroma)
chr8.CNVs_nul_stroma <- cnvs(CNMOPS.chr8_nul_stroma)
chr9.CNVs_nul_stroma <- cnvs(CNMOPS.chr9_nul_stroma)
chr10.CNVs_nul_stroma <- cnvs(CNMOPS.chr10_nul_stroma)
chr11.CNVs_nul_stroma <- cnvs(CNMOPS.chr11_nul_stroma)
chr12.CNVs_nul_stroma <- cnvs(CNMOPS.chr12_nul_stroma)
chr13.CNVs_nul_stroma <- cnvs(CNMOPS.chr13_nul_stroma)
chr14.CNVs_nul_stroma <- cnvs(CNMOPS.chr14_nul_stroma)
chr15.CNVs_nul_stroma <- cnvs(CNMOPS.chr15_nul_stroma)
chr16.CNVs_nul_stroma <- cnvs(CNMOPS.chr16_nul_stroma)
chr17.CNVs_nul_stroma <- cnvs(CNMOPS.chr17_nul_stroma)
chr18.CNVs_nul_stroma <- cnvs(CNMOPS.chr18_nul_stroma)
chr19.CNVs_nul_stroma <- cnvs(CNMOPS.chr19_nul_stroma)
chr20.CNVs_nul_stroma <- cnvs(CNMOPS.chr20_nul_stroma)
chr21.CNVs_nul_stroma <- cnvs(CNMOPS.chr21_nul_stroma)
chr22.CNVs_nul_stroma <- cnvs(CNMOPS.chr22_nul_stroma)
chrX.CNVs_nul_stroma <- cnvs(CNMOPS.chrX_nul_stroma)


###########################################################################
###########################################################################

# Combine all CNV calls maps

# Parous - Epithelium
# Accounting for the missing samples for Chr 20, 21 and 22
# Putting empty cells for each missing samples
chr20.CNVR_par@elementMetadata$E59 <- ""
chr21.CNVR_par@elementMetadata$E59 <- ""
chr22.CNVR_par@elementMetadata$E59 <- ""
chr22.CNVR_par@elementMetadata$E63 <- ""
chr20.CNVR_par@elementMetadata <- chr20.CNVR_par@elementMetadata[,c("a33","AA27","CC29","e37","E41","E59",
                                                                    "E61","E63","E67","E71","EE31","G7",
                                                                    "I9","K11","M13","O15","S19")]
chr21.CNVR_par@elementMetadata <- chr21.CNVR_par@elementMetadata[,c("a33","AA27","CC29","e37","E41","E59",
                                                                    "E61","E63","E67","E71","EE31","G7",
                                                                    "I9","K11","M13","O15","S19")]
chr22.CNVR_par@elementMetadata <- chr22.CNVR_par@elementMetadata[,c("a33","AA27","CC29","e37","E41","E59",
                                                                    "E61","E63","E67","E71","EE31","G7",
                                                                    "I9","K11","M13","O15","S19")]
require(data.table)
df.epi.par <- rbind(as.data.frame(chr1.CNVR_par), as.data.frame(chr2.CNVR_par), as.data.frame(chr3.CNVR_par),
                    as.data.frame(chr4.CNVR_par), as.data.frame(chr5.CNVR_par), as.data.frame(chr6.CNVR_par),
                    as.data.frame(chr7.CNVR_par), as.data.frame(chr8.CNVR_par), as.data.frame(chr9.CNVR_par),
                    as.data.frame(chr10.CNVR_par), as.data.frame(chr11.CNVR_par), as.data.frame(chr12.CNVR_par),
                    as.data.frame(chr13.CNVR_par), as.data.frame(chr14.CNVR_par), as.data.frame(chr15.CNVR_par),
                    as.data.frame(chr16.CNVR_par), as.data.frame(chr17.CNVR_par), as.data.frame(chr18.CNVR_par),
                    as.data.frame(chr19.CNVR_par), as.data.frame(chr20.CNVR_par), as.data.frame(chr21.CNVR_par),
                    as.data.frame(chr22.CNVR_par), as.data.frame(chrX.CNVR_par))

# Put NAs in CNVR that are diploid
df.epi.par[df.epi.par == "CN2"] <- NA
df.epi.par[df.epi.par == ""] <- NA
df.epi.par <- data.frame(lapply(as.data.frame(df.epi.par),function (x){gsub("CN","",x)}))

# Nulliparous - epithelium
# Chromosomes WITHOUT CNVRs in Nulliparous Donor: chromsomes 13, 18 and 20
df.epi.nul <- rbind(as.data.frame(chr1.CNVR_nul), as.data.frame(chr2.CNVR_nul), as.data.frame(chr3.CNVR_nul),
                    as.data.frame(chr4.CNVR_nul), as.data.frame(chr5.CNVR_nul), as.data.frame(chr6.CNVR_nul),
                    as.data.frame(chr7.CNVR_nul), as.data.frame(chr8.CNVR_nul), as.data.frame(chr9.CNVR_nul),
                    as.data.frame(chr10.CNVR_nul), as.data.frame(chr11.CNVR_nul), as.data.frame(chr12.CNVR_nul),
                    as.data.frame(chr14.CNVR_nul), as.data.frame(chr15.CNVR_nul), as.data.frame(chr16.CNVR_nul),
                    as.data.frame(chr17.CNVR_nul), as.data.frame(chr19.CNVR_nul), as.data.frame(chr22.CNVR_nul),
                    as.data.frame(chr21.CNVR_nul), as.data.frame(chrX.CNVR_nul))

df.epi.nul[df.epi.nul == "CN2"] <- NA
df.epi.nul[df.epi.nul == ""] <- NA
df.epi.nul <- data.frame(lapply(as.data.frame(df.epi.nul),function (x){gsub("CN","",x)}))

# Parous - Stroma
# Accounting for the missing samples for Chr 20, 21 and 22
# Putting empty cells for each missing samples
# chr20.CNVR_par_stroma@elementMetadata$S60 <- "" ### No CNV detected
chr21.CNVR_par_stroma@elementMetadata$S60 <- ""
chr22.CNVR_par_stroma@elementMetadata$S60 <- ""
chr22.CNVR_par_stroma@elementMetadata$S64 <- ""
chr21.CNVR_par_stroma@elementMetadata <- chr21.CNVR_par_stroma@elementMetadata[,c("b34","BB28","DD30","f38","FF32","H8",
                                                                                  "J10","L12","N14","P16","S42","S60",
                                                                                  "S62","S64","S68","S72","T20")]
chr22.CNVR_par_stroma@elementMetadata <- chr22.CNVR_par_stroma@elementMetadata[,c("b34","BB28","DD30","f38","FF32","H8",
                                                                                  "J10","L12","N14","P16","S42","S60",
                                                                                  "S62","S64","S68","S72","T20")]

df.str.par <- rbind(as.data.frame(chr1.CNVR_par_stroma), as.data.frame(chr2.CNVR_par_stroma), as.data.frame(chr3.CNVR_par_stroma),
                    as.data.frame(chr4.CNVR_par_stroma), as.data.frame(chr5.CNVR_par_stroma), as.data.frame(chr6.CNVR_par_stroma),
                    as.data.frame(chr7.CNVR_par_stroma), as.data.frame(chr8.CNVR_par_stroma), as.data.frame(chr9.CNVR_par_stroma),
                    as.data.frame(chr10.CNVR_par_stroma), as.data.frame(chr11.CNVR_par_stroma), as.data.frame(chr12.CNVR_par_stroma),
                    as.data.frame(chr13.CNVR_par_stroma), as.data.frame(chr14.CNVR_par_stroma), as.data.frame(chr15.CNVR_par_stroma),
                    as.data.frame(chr16.CNVR_par_stroma), as.data.frame(chr17.CNVR_par_stroma), as.data.frame(chr18.CNVR_par_stroma),
                    as.data.frame(chr19.CNVR_par_stroma), as.data.frame(chr21.CNVR_par_stroma), as.data.frame(chr22.CNVR_par_stroma),
                    as.data.frame(chrX.CNVR_par_stroma))

df.str.par[df.str.par == "CN2"] <- NA
df.str.par[df.str.par == ""] <- NA
df.str.par <- data.frame(lapply(as.data.frame(df.str.par),function (x){gsub("CN","",x)}))

# Nulliparous - Stroma
df.str.nul <- rbind(as.data.frame(chr1.CNVR_nul_stroma), as.data.frame(chr2.CNVR_nul_stroma), as.data.frame(chr3.CNVR_nul_stroma),
                    as.data.frame(chr4.CNVR_nul_stroma), as.data.frame(chr5.CNVR_nul_stroma), as.data.frame(chr6.CNVR_nul_stroma),
                    as.data.frame(chr7.CNVR_nul_stroma), as.data.frame(chr8.CNVR_nul_stroma), as.data.frame(chr9.CNVR_nul_stroma),
                    as.data.frame(chr10.CNVR_nul_stroma), as.data.frame(chr11.CNVR_nul_stroma), as.data.frame(chr12.CNVR_nul_stroma),
                    as.data.frame(chr13.CNVR_nul_stroma), as.data.frame(chr14.CNVR_nul_stroma), as.data.frame(chr15.CNVR_nul_stroma),
                    as.data.frame(chr16.CNVR_nul_stroma), as.data.frame(chr17.CNVR_nul_stroma), as.data.frame(chr18.CNVR_nul_stroma),
                    as.data.frame(chr19.CNVR_nul_stroma), as.data.frame(chr21.CNVR_nul_stroma), as.data.frame(chr22.CNVR_nul_stroma),
                    as.data.frame(chrX.CNVR_nul_stroma))

df.str.nul[df.str.nul == "CN2"] <- NA
df.str.nul[df.str.nul == ""] <- NA
df.str.nul <- data.frame(lapply(as.data.frame(df.str.nul),function (x){gsub("CN","",x)}))

###########################################################################
###########################################################################

# Total CNVs in the breast epithelium, irrespective of parity
library(tidyr)
raw.cnvr.count.par <- df.epi.par[1:4]
raw.cnvr.count.nul <- df.epi.nul[1:4]
raw.cnvr.count <- rbind(raw.cnvr.count.par, raw.cnvr.count.nul)
raw.cnvr.count$concatonate <- paste(raw.cnvr.count$seqnames, raw.cnvr.count$start,raw.cnvr.count$end, sep = "")
raw.cnvr.count <- raw.cnvr.count[!duplicated(raw.cnvr.count$concatonate),]
dim(raw.cnvr.count) # 488

###########################################################################
###########################################################################

# Acquiring telomeric and centromeric regions
library("dplyr")
system("curl -s 'http://hgdownload.soe.ucsc.edu/goldenPath/hg19/database/cytoBandIdeo.txt.gz' | gunzip -c | grep acen > centromeres.txt")
centromeres <- as.data.frame(read.table("centromeres.txt", header = FALSE, sep="\t", stringsAsFactors=FALSE, quote=""))
centromeres <- centromeres[,-c(4:5)]

# Increasing the length of each end of centromeres by 100 kbp for filtering
# i.e., CNVs lies/overlaps within 100 kbp of centromeres are removed
# centromeres
centromeres <- mutate(centromeres, start = V2 - 100000)
centromeres <- mutate(centromeres, end = V3 + 100000)
centromeres <- centromeres[,-c(2:3)]
colnames(centromeres) <- c("chrom","start","end")
centromeres$location <- "centromere"

# telomeres
# coordinates based here: https://www.ncbi.nlm.nih.gov/grc/human/data?asm=GRCh37.p13
# Chromosome Y was excluded
# telomeres.A (starts of each chromosomes)
telomeres.A<- data.frame(rep(paste("chr",c(c(1:22),"X"), sep = "")))
telomeres.A$start <- rep(c(1),23)
telomeres.A$end <- as.numeric(rep(c(100000),23))
colnames(telomeres.A) <- c("chrom","start","end")
telomeres.A$location <- "telomere"

# telomeres.B (end of each chromosomes)
# Column names for telomeres: start = end of the chrom, end = 100 kbp of telomere
telomeres.B<- data.frame(rep(paste("chr",c(c(1:22),"X"), sep = "")))
telomeres.B$A <- as.numeric(c("249250621", "243199373", "198022430", "191154276", "180915260",
                              "171115067", "159138663", "146364022", "141213431", "135534747",
                              "135006516", "133851895", "115169878", "107349540", "102531392",
                              "90354753", "81195210", "78077248", "59128983", "63025520", "48129895",
                              "51304566","155270560"))
telomeres.B <- mutate(telomeres.B, end = A - 100000)
telomeres.B <- telomeres.B[,c(1,3,2)]
colnames(telomeres.B) <- c("chrom","start","end")
telomeres.B$location <- "telomere"

centro.telo <- rbind(centromeres,telomeres.A,telomeres.B) # Bind centromere and telomeres
options(scipen=999) # prevent scientific notations

###########################################################################
###########################################################################

# Create BED files for BEDTools
# centromere and telomere BED file
write.table(as.data.frame(centro.telo), file = "centro_telo.bed", sep = "\t",row.names = F, quote = F, col.names = F)

# Epithelium: BED files for all the CNVRs in Parous and Nulliparous
write.table(as.data.frame(df.epi.par), file = "all_cnvr_epi_par.bed", sep = "\t",row.names = F, quote = F, col.names = F)
write.table(as.data.frame(df.epi.nul), file = "all_cnvr_epi_nul.bed", sep = "\t",row.names = F, quote = F, col.names = F)

# Stroma: BED files for all the CNVRs in Parous and Nulliparous
write.table(as.data.frame(df.str.par), file = "all_cnvr_str_par.bed", sep = "\t",row.names = F, quote = F, col.names = F)
write.table(as.data.frame(df.str.nul), file = "all_cnvr_str_nul.bed", sep = "\t",row.names = F, quote = F, col.names = F)

###########################################################################
###########################################################################

# Filter CNVs near centromeric and telomeric regions
# Epithelium Parous
system("bedtools intersect -v -a all_cnvr_epi_par.bed -b centro_telo.bed > filt_cnvr_epi_par.bed")
filt.cnvr.epi.par <- as.data.frame(read.table("filt_cnvr_epi_par.bed", header = FALSE, sep="\t", stringsAsFactors=FALSE, quote=""))
colnames(filt.cnvr.epi.par) <- c(colnames(df.epi.par))

# Epithelium Nulliparous
system("bedtools intersect -v -a all_cnvr_epi_nul.bed -b centro_telo.bed > filt_cnvr_epi_nul.bed")
filt.cnvr.epi.nul <- as.data.frame(read.table("filt_cnvr_epi_nul.bed", header = FALSE, sep="\t", stringsAsFactors=FALSE, quote=""))
colnames(filt.cnvr.epi.nul) <- c(colnames(df.epi.nul))

# Stroma Parous
system("bedtools intersect -v -a all_cnvr_str_par.bed -b centro_telo.bed > filt_cnvr_str_par.bed")
filt.cnvr.str.par <- as.data.frame(read.table("filt_cnvr_str_par.bed", header = FALSE, sep="\t", stringsAsFactors=FALSE, quote=""))
colnames(filt.cnvr.str.par) <- c(colnames(df.str.par))

# Stroma Nulliparous
system("bedtools intersect -v -a all_cnvr_str_nul.bed -b centro_telo.bed > filt_cnvr_str_nul.bed")
filt.cnvr.str.nul <- as.data.frame(read.table("filt_cnvr_str_nul.bed", header = FALSE, sep="\t", stringsAsFactors=FALSE, quote=""))
colnames(filt.cnvr.str.nul) <- c(colnames(df.str.nul))

###########################################################################
###########################################################################

# Filter Germline CNVR per Donor

# Parous: Matched Epithelium and Stroma samples
# a33/b34
cnvr.a33 <- filt.cnvr.epi.par[,c("seqnames","start","end","a33")]
cnvr.b34 <- filt.cnvr.str.par[,c("seqnames","start","end","b34")]
cnvr.a33 <- cnvr.a33[!is.na(cnvr.a33$a33),]
cnvr.b34 <- cnvr.b34[!is.na(cnvr.b34$b34),]
write.table(as.data.frame(cnvr.a33), file = "cnvr_a33.bed", sep = "\t",row.names = F, quote = F, col.names = F)
write.table(as.data.frame(cnvr.b34), file = "cnvr_b34.bed", sep = "\t",row.names = F, quote = F, col.names = F)
system("bedtools intersect -v -f 0.7 -r -a cnvr_a33.bed -b cnvr_b34.bed > cnvr_a33_b34.bed") # This can be implemented to find those in stroma
result_par_a33_b34 <- as.data.frame(read.table("cnvr_a33_b34.bed", header = FALSE, sep="\t", stringsAsFactors=FALSE, quote=""))
result_par_a33_b34$PXID <- "a33"
colnames(result_par_a33_b34) <- c("seqnames","start","end","cnvr","PXID")

# AA27/BB28
cnvr.AA27 <- filt.cnvr.epi.par[,c("seqnames","start","end","AA27")]
cnvr.BB28 <- filt.cnvr.str.par[,c("seqnames","start","end","BB28")]
cnvr.AA27 <- cnvr.AA27[!is.na(cnvr.AA27$AA27),]
cnvr.BB28 <- cnvr.BB28[!is.na(cnvr.BB28$BB28),]
write.table(as.data.frame(cnvr.AA27), file = "cnvr_AA27.bed", sep = "\t",row.names = F, quote = F, col.names = F)
write.table(as.data.frame(cnvr.BB28), file = "cnvr_BB28.bed", sep = "\t",row.names = F, quote = F, col.names = F)
system("bedtools intersect -v -f 0.7 -r -a cnvr_AA27.bed -b cnvr_BB28.bed > cnvr_AA27_BB28.bed")
result_par_AA27_BB28 <- as.data.frame(read.table("cnvr_AA27_BB28.bed", header = FALSE, sep="\t", stringsAsFactors=FALSE, quote=""))
result_par_AA27_BB28$PXID <- "AA27"
colnames(result_par_AA27_BB28) <- c("seqnames","start","end","cnvr","PXID")

# CC29/DD30
cnvr.CC29 <- filt.cnvr.epi.par[,c("seqnames","start","end","CC29")]
cnvr.DD30 <- filt.cnvr.str.par[,c("seqnames","start","end","DD30")]
cnvr.CC29 <- cnvr.CC29[!is.na(cnvr.CC29$CC29),]
cnvr.DD30 <- cnvr.DD30[!is.na(cnvr.DD30$DD30),]
write.table(as.data.frame(cnvr.CC29), file = "cnvr_CC29.bed", sep = "\t",row.names = F, quote = F, col.names = F)
write.table(as.data.frame(cnvr.DD30), file = "cnvr_DD30.bed", sep = "\t",row.names = F, quote = F, col.names = F)
system("bedtools intersect -v -f 0.7 -r -a cnvr_CC29.bed -b cnvr_DD30.bed > cnvr_CC29_DD30.bed")
result_par_CC29_DD30 <- as.data.frame(read.table("cnvr_CC29_DD30.bed", header = FALSE, sep="\t", stringsAsFactors=FALSE, quote=""))
result_par_CC29_DD30$PXID <- "CC29"
colnames(result_par_CC29_DD30) <- c("seqnames","start","end","cnvr","PXID")

# e37/f38
cnvr.e37 <- filt.cnvr.epi.par[,c("seqnames","start","end","e37")]
cnvr.f38 <- filt.cnvr.str.par[,c("seqnames","start","end","f38")]
cnvr.e37 <- cnvr.e37[!is.na(cnvr.e37$e37),]
cnvr.f38 <- cnvr.f38[!is.na(cnvr.f38$f38),]
write.table(as.data.frame(cnvr.e37), file = "cnvr_e37.bed", sep = "\t",row.names = F, quote = F, col.names = F)
write.table(as.data.frame(cnvr.f38), file = "cnvr_f38.bed", sep = "\t",row.names = F, quote = F, col.names = F)
system("bedtools intersect -v -f 0.7 -r -a cnvr_e37.bed -b cnvr_f38.bed > cnvr_e37_f38.bed")
result_par_e37_f38 <- as.data.frame(read.table("cnvr_e37_f38.bed", header = FALSE, sep="\t", stringsAsFactors=FALSE, quote=""))
result_par_e37_f38$PXID <- "e37"
colnames(result_par_e37_f38) <- c("seqnames","start","end","cnvr","PXID")

# E41/S42
cnvr.E41 <- filt.cnvr.epi.par[,c("seqnames","start","end","E41")]
cnvr.S42 <- filt.cnvr.str.par[,c("seqnames","start","end","S42")]
cnvr.E41 <- cnvr.E41[!is.na(cnvr.E41$E41),]
cnvr.S42 <- cnvr.S42[!is.na(cnvr.S42$S42),]
write.table(as.data.frame(cnvr.E41), file = "cnvr_E41.bed", sep = "\t",row.names = F, quote = F, col.names = F)
write.table(as.data.frame(cnvr.S42), file = "cnvr_S42.bed", sep = "\t",row.names = F, quote = F, col.names = F)
system("bedtools intersect -v -f 0.7 -r -a cnvr_E41.bed -b cnvr_S42.bed > cnvr_E41_S42.bed")
result_par_E41_S42 <- as.data.frame(read.table("cnvr_E41_S42.bed", header = FALSE, sep="\t", stringsAsFactors=FALSE, quote=""))
result_par_E41_S42$PXID <- "E41"
colnames(result_par_E41_S42) <- c("seqnames","start","end","cnvr","PXID")

# E59/S60
cnvr.E59 <- filt.cnvr.epi.par[,c("seqnames","start","end","E59")]
cnvr.S60 <- filt.cnvr.str.par[,c("seqnames","start","end","S60")]
cnvr.E59 <- cnvr.E59[!is.na(cnvr.E59$E59),]
cnvr.S60 <- cnvr.S60[!is.na(cnvr.S60$S60),]
write.table(as.data.frame(cnvr.E59), file = "cnvr_E59.bed", sep = "\t",row.names = F, quote = F, col.names = F)
write.table(as.data.frame(cnvr.S60), file = "cnvr_S60.bed", sep = "\t",row.names = F, quote = F, col.names = F)
system("bedtools intersect -v -f 0.7 -r -a cnvr_E59.bed -b cnvr_S60.bed > cnvr_E59_S60.bed")
result_par_E59_S60 <- as.data.frame(read.table("cnvr_E59_S60.bed", header = FALSE, sep="\t", stringsAsFactors=FALSE, quote=""))
result_par_E59_S60$PXID <- "E59"
colnames(result_par_E59_S60) <- c("seqnames","start","end","cnvr","PXID")

# E61/S62
cnvr.E61 <- filt.cnvr.epi.par[,c("seqnames","start","end","E61")]
cnvr.S62 <- filt.cnvr.str.par[,c("seqnames","start","end","S62")]
cnvr.E61 <- cnvr.E61[!is.na(cnvr.E61$E61),]
cnvr.S62 <- cnvr.S62[!is.na(cnvr.S62$S62),]
write.table(as.data.frame(cnvr.E61), file = "cnvr_E61.bed", sep = "\t",row.names = F, quote = F, col.names = F)
write.table(as.data.frame(cnvr.S62), file = "cnvr_S62.bed", sep = "\t",row.names = F, quote = F, col.names = F)
system("bedtools intersect -v -f 0.7 -r -a cnvr_E61.bed -b cnvr_S62.bed > cnvr_E61_S62.bed")
result_par_E61_S62 <- as.data.frame(read.table("cnvr_E61_S62.bed", header = FALSE, sep="\t", stringsAsFactors=FALSE, quote=""))
result_par_E61_S62$PXID <- "E61"
colnames(result_par_E61_S62) <- c("seqnames","start","end","cnvr","PXID")

# E63/S64
cnvr.E63 <- filt.cnvr.epi.par[,c("seqnames","start","end","E63")]
cnvr.S64 <- filt.cnvr.str.par[,c("seqnames","start","end","S64")]
cnvr.E63 <- cnvr.E63[!is.na(cnvr.E63$E63),]
cnvr.S64 <- cnvr.S64[!is.na(cnvr.S64$S64),]
write.table(as.data.frame(cnvr.E63), file = "cnvr_E63.bed", sep = "\t",row.names = F, quote = F, col.names = F)
write.table(as.data.frame(cnvr.S64), file = "cnvr_S64.bed", sep = "\t",row.names = F, quote = F, col.names = F)
system("bedtools intersect -v -f 0.7 -r -a cnvr_E63.bed -b cnvr_S64.bed > cnvr_E63_S64.bed")
result_par_E63_S64 <- as.data.frame(read.table("cnvr_E63_S64.bed", header = FALSE, sep="\t", stringsAsFactors=FALSE, quote=""))
result_par_E63_S64$PXID <- "E63"
colnames(result_par_E63_S64) <- c("seqnames","start","end","cnvr","PXID")

# E67/S68
cnvr.E67 <- filt.cnvr.epi.par[,c("seqnames","start","end","E67")]
cnvr.S68 <- filt.cnvr.str.par[,c("seqnames","start","end","S68")]
cnvr.E67 <- cnvr.E67[!is.na(cnvr.E67$E67),]
cnvr.S68 <- cnvr.S68[!is.na(cnvr.S68$S68),]
write.table(as.data.frame(cnvr.E67), file = "cnvr_E67.bed", sep = "\t",row.names = F, quote = F, col.names = F)
write.table(as.data.frame(cnvr.S68), file = "cnvr_S68.bed", sep = "\t",row.names = F, quote = F, col.names = F)
system("bedtools intersect -v -f 0.7 -r -a cnvr_E67.bed -b cnvr_S68.bed > cnvr_E67_S68.bed")
result_par_E67_S68 <- as.data.frame(read.table("cnvr_E67_S68.bed", header = FALSE, sep="\t", stringsAsFactors=FALSE, quote=""))
result_par_E67_S68$PXID <- "E67"
colnames(result_par_E67_S68) <- c("seqnames","start","end","cnvr","PXID")

# E71/S72
cnvr.E71 <- filt.cnvr.epi.par[,c("seqnames","start","end","E71")]
cnvr.S72 <- filt.cnvr.str.par[,c("seqnames","start","end","S72")]
cnvr.E71 <- cnvr.E71[!is.na(cnvr.E71$E71),]
cnvr.S72 <- cnvr.S72[!is.na(cnvr.S72$S72),]
write.table(as.data.frame(cnvr.E71), file = "cnvr_E71.bed", sep = "\t",row.names = F, quote = F, col.names = F)
write.table(as.data.frame(cnvr.S72), file = "cnvr_S72.bed", sep = "\t",row.names = F, quote = F, col.names = F)
system("bedtools intersect -v -f 0.7 -r -a cnvr_E71.bed -b cnvr_S72.bed > cnvr_E71_S72.bed")
result_par_E71_S72 <- as.data.frame(read.table("cnvr_E71_S72.bed", header = FALSE, sep="\t", stringsAsFactors=FALSE, quote=""))
result_par_E71_S72$PXID <- "E71"
colnames(result_par_E71_S72) <- c("seqnames","start","end","cnvr","PXID")

# EE31/FF32
cnvr.EE31 <- filt.cnvr.epi.par[,c("seqnames","start","end","EE31")]
cnvr.FF32 <- filt.cnvr.str.par[,c("seqnames","start","end","FF32")]
cnvr.EE31 <- cnvr.EE31[!is.na(cnvr.EE31$EE31),]
cnvr.FF32 <- cnvr.FF32[!is.na(cnvr.FF32$FF32),]
write.table(as.data.frame(cnvr.EE31), file = "cnvr_EE31.bed", sep = "\t",row.names = F, quote = F, col.names = F)
write.table(as.data.frame(cnvr.FF32), file = "cnvr_FF32.bed", sep = "\t",row.names = F, quote = F, col.names = F)
system("bedtools intersect -v -f 0.7 -r -a cnvr_EE31.bed -b cnvr_FF32.bed > cnvr_EE31_FF32.bed")
result_par_EE31_FF32 <- as.data.frame(read.table("cnvr_EE31_FF32.bed", header = FALSE, sep="\t", stringsAsFactors=FALSE, quote=""))
result_par_EE31_FF32$PXID <- "EE31"
colnames(result_par_EE31_FF32) <- c("seqnames","start","end","cnvr","PXID")

# G7/H8
cnvr.G7 <- filt.cnvr.epi.par[,c("seqnames","start","end","G7")]
cnvr.H8 <- filt.cnvr.str.par[,c("seqnames","start","end","H8")]
cnvr.G7 <- cnvr.G7[!is.na(cnvr.G7$G7),]
cnvr.H8 <- cnvr.H8[!is.na(cnvr.H8$H8),]
write.table(as.data.frame(cnvr.G7), file = "cnvr_G7.bed", sep = "\t",row.names = F, quote = F, col.names = F)
write.table(as.data.frame(cnvr.H8), file = "cnvr_H8.bed", sep = "\t",row.names = F, quote = F, col.names = F)
system("bedtools intersect -v -f 0.7 -r -a cnvr_G7.bed -b cnvr_H8.bed > cnvr_G7_H8.bed")
result_par_G7_H8 <- as.data.frame(read.table("cnvr_G7_H8.bed", header = FALSE, sep="\t", stringsAsFactors=FALSE, quote=""))
result_par_G7_H8$PXID <- "G7"
colnames(result_par_G7_H8) <- c("seqnames","start","end","cnvr","PXID")

# I9/J10
cnvr.I9 <- filt.cnvr.epi.par[,c("seqnames","start","end","I9")]
cnvr.J10 <- filt.cnvr.str.par[,c("seqnames","start","end","J10")]
cnvr.I9 <- cnvr.I9[!is.na(cnvr.I9$I9),]
cnvr.J10 <- cnvr.J10[!is.na(cnvr.J10$J10),]
write.table(as.data.frame(cnvr.I9), file = "cnvr_I9.bed", sep = "\t",row.names = F, quote = F, col.names = F)
write.table(as.data.frame(cnvr.J10), file = "cnvr_J10.bed", sep = "\t",row.names = F, quote = F, col.names = F)
system("bedtools intersect -v -f 0.7 -r -a cnvr_I9.bed -b cnvr_J10.bed > cnvr_I9_J10.bed")
result_par_I9_J10 <- as.data.frame(read.table("cnvr_I9_J10.bed", header = FALSE, sep="\t", stringsAsFactors=FALSE, quote=""))
result_par_I9_J10$PXID <- "I9"
colnames(result_par_I9_J10) <- c("seqnames","start","end","cnvr","PXID")

# K11/L12
cnvr.K11 <- filt.cnvr.epi.par[,c("seqnames","start","end","K11")]
cnvr.L12 <- filt.cnvr.str.par[,c("seqnames","start","end","L12")]
cnvr.K11 <- cnvr.K11[!is.na(cnvr.K11$K11),]
cnvr.L12 <- cnvr.L12[!is.na(cnvr.L12$L12),]
write.table(as.data.frame(cnvr.K11), file = "cnvr_K11.bed", sep = "\t",row.names = F, quote = F, col.names = F)
write.table(as.data.frame(cnvr.L12), file = "cnvr_L12.bed", sep = "\t",row.names = F, quote = F, col.names = F)
system("bedtools intersect -v -f 0.7 -r -a cnvr_K11.bed -b cnvr_L12.bed > cnvr_K11_L12.bed")
result_par_K11_L12 <- as.data.frame(read.table("cnvr_K11_L12.bed", header = FALSE, sep="\t", stringsAsFactors=FALSE, quote=""))
result_par_K11_L12$PXID <- "K11"
colnames(result_par_K11_L12) <- c("seqnames","start","end","cnvr","PXID")

# M13/N14
cnvr.M13 <- filt.cnvr.epi.par[,c("seqnames","start","end","M13")]
cnvr.N14 <- filt.cnvr.str.par[,c("seqnames","start","end","N14")]
cnvr.M13 <- cnvr.M13[!is.na(cnvr.M13$M13),]
cnvr.N14 <- cnvr.N14[!is.na(cnvr.N14$N14),]
write.table(as.data.frame(cnvr.M13), file = "cnvr_M13.bed", sep = "\t",row.names = F, quote = F, col.names = F)
write.table(as.data.frame(cnvr.N14), file = "cnvr_N14.bed", sep = "\t",row.names = F, quote = F, col.names = F)
system("bedtools intersect -v -f 0.7 -r -a cnvr_M13.bed -b cnvr_N14.bed > cnvr_M13_N14.bed")
result_par_M13_N14 <- as.data.frame(read.table("cnvr_M13_N14.bed", header = FALSE, sep="\t", stringsAsFactors=FALSE, quote=""))
result_par_M13_N14$PXID <- "M13"
colnames(result_par_M13_N14) <- c("seqnames","start","end","cnvr","PXID")

# O15/P16
cnvr.O15 <- filt.cnvr.epi.par[,c("seqnames","start","end","O15")]
cnvr.P16 <- filt.cnvr.str.par[,c("seqnames","start","end","P16")]
cnvr.O15 <- cnvr.O15[!is.na(cnvr.O15$O15),]
cnvr.P16 <- cnvr.P16[!is.na(cnvr.P16$P16),]
write.table(as.data.frame(cnvr.O15), file = "cnvr_O15.bed", sep = "\t",row.names = F, quote = F, col.names = F)
write.table(as.data.frame(cnvr.P16), file = "cnvr_P16.bed", sep = "\t",row.names = F, quote = F, col.names = F)
system("bedtools intersect -v -f 0.7 -r -a cnvr_O15.bed -b cnvr_P16.bed > cnvr_O15_P16.bed")
result_par_O15_P16 <- as.data.frame(read.table("cnvr_O15_P16.bed", header = FALSE, sep="\t", stringsAsFactors=FALSE, quote=""))
result_par_O15_P16$PXID <- "O15"
colnames(result_par_O15_P16) <- c("seqnames","start","end","cnvr","PXID")

# S19/T20
cnvr.S19 <- filt.cnvr.epi.par[,c("seqnames","start","end","S19")]
cnvr.T20 <- filt.cnvr.str.par[,c("seqnames","start","end","T20")]
cnvr.S19 <- cnvr.S19[!is.na(cnvr.S19$S19),]
cnvr.T20 <- cnvr.T20[!is.na(cnvr.T20$T20),]
write.table(as.data.frame(cnvr.S19), file = "cnvr_S19.bed", sep = "\t",row.names = F, quote = F, col.names = F)
write.table(as.data.frame(cnvr.T20), file = "cnvr_T20.bed", sep = "\t",row.names = F, quote = F, col.names = F)
system("bedtools intersect -v -f 0.7 -r -a cnvr_S19.bed -b cnvr_T20.bed > cnvr_S19_T20.bed")
result_par_S19_T20 <- as.data.frame(read.table("cnvr_S19_T20.bed", header = FALSE, sep="\t", stringsAsFactors=FALSE, quote=""))
result_par_S19_T20$PXID <- "S19"
colnames(result_par_S19_T20) <- c("seqnames","start","end","cnvr","PXID")

###########################################################################
###########################################################################

# Nulliparous: Matched Epithelium and Stroma samples

# A1/B2
cnvr.A1 <- filt.cnvr.epi.nul[,c("seqnames","start","end","A1")]
cnvr.B2 <- filt.cnvr.str.nul[,c("seqnames","start","end","B2")]
cnvr.A1 <- cnvr.A1[!is.na(cnvr.A1$A1),]
cnvr.B2 <- cnvr.B2[!is.na(cnvr.B2$B2),]
write.table(as.data.frame(cnvr.A1), file = "cnvr_A1.bed", sep = "\t",row.names = F, quote = F, col.names = F)
write.table(as.data.frame(cnvr.B2), file = "cnvr_B2.bed", sep = "\t",row.names = F, quote = F, col.names = F)
system("bedtools intersect -v -f 0.7 -r -a cnvr_A1.bed -b cnvr_B2.bed > cnvr_A1_B2.bed")
result_nul_A1_B2 <- as.data.frame(read.table("cnvr_A1_B2.bed", header = FALSE, sep="\t", stringsAsFactors=FALSE, quote=""))
result_nul_A1_B2$PXID <- "A1"
colnames(result_nul_A1_B2) <- c("seqnames","start","end","cnvr","PXID")

# C3/D4
cnvr.C3 <- filt.cnvr.epi.nul[,c("seqnames","start","end","C3")]
cnvr.D4 <- filt.cnvr.str.nul[,c("seqnames","start","end","D4")]
cnvr.C3 <- cnvr.C3[!is.na(cnvr.C3$C3),]
cnvr.D4 <- cnvr.D4[!is.na(cnvr.D4$D4),]
write.table(as.data.frame(cnvr.C3), file = "cnvr_C3.bed", sep = "\t",row.names = F, quote = F, col.names = F)
write.table(as.data.frame(cnvr.D4), file = "cnvr_D4.bed", sep = "\t",row.names = F, quote = F, col.names = F)
system("bedtools intersect -v -f 0.7 -r -a cnvr_C3.bed -b cnvr_D4.bed > cnvr_C3_D4.bed")
result_nul_C3_D4 <- as.data.frame(read.table("cnvr_C3_D4.bed", header = FALSE, sep="\t", stringsAsFactors=FALSE, quote=""))
result_nul_C3_D4$PXID <- "C3"
colnames(result_nul_C3_D4) <- c("seqnames","start","end","cnvr","PXID")

# c35/d36
cnvr.c35 <- filt.cnvr.epi.nul[,c("seqnames","start","end","c35")]
cnvr.d36 <- filt.cnvr.str.nul[,c("seqnames","start","end","d36")]
cnvr.c35 <- cnvr.c35[!is.na(cnvr.c35$c35),]
cnvr.d36 <- cnvr.d36[!is.na(cnvr.d36$d36),]
write.table(as.data.frame(cnvr.c35), file = "cnvr_c35.bed", sep = "\t",row.names = F, quote = F, col.names = F)
write.table(as.data.frame(cnvr.d36), file = "cnvr_d36.bed", sep = "\t",row.names = F, quote = F, col.names = F)
system("bedtools intersect -v -f 0.7 -r -a cnvr_c35.bed -b cnvr_d36.bed > cnvr_c35_d36.bed")
result_nul_c35_d36 <- as.data.frame(read.table("cnvr_c35_d36.bed", header = FALSE, sep="\t", stringsAsFactors=FALSE, quote=""))
result_nul_c35_d36$PXID <- "c35"
colnames(result_nul_c35_d36) <- c("seqnames","start","end","cnvr","PXID")

# E5/F6
cnvr.E5 <- filt.cnvr.epi.nul[,c("seqnames","start","end","E5")]
cnvr.F6 <- filt.cnvr.str.nul[,c("seqnames","start","end","F6")]
cnvr.E5 <- cnvr.E5[!is.na(cnvr.E5$E5),]
cnvr.F6 <- cnvr.F6[!is.na(cnvr.F6$F6),]
write.table(as.data.frame(cnvr.E5), file = "cnvr_E5.bed", sep = "\t",row.names = F, quote = F, col.names = F)
write.table(as.data.frame(cnvr.F6), file = "cnvr_F6.bed", sep = "\t",row.names = F, quote = F, col.names = F)
system("bedtools intersect -v -f 0.7 -r -a cnvr_E5.bed -b cnvr_F6.bed > cnvr_E5_F6.bed")
result_nul_E5_F6 <- as.data.frame(read.table("cnvr_E5_F6.bed", header = FALSE, sep="\t", stringsAsFactors=FALSE, quote=""))
result_nul_E5_F6$PXID <- "E5"
colnames(result_nul_E5_F6) <- c("seqnames","start","end","cnvr","PXID")

# E65/S66
cnvr.E65 <- filt.cnvr.epi.nul[,c("seqnames","start","end","E65")]
cnvr.S66 <- filt.cnvr.str.nul[,c("seqnames","start","end","S66")]
cnvr.E65 <- cnvr.E65[!is.na(cnvr.E65$E65),]
cnvr.S66 <- cnvr.S66[!is.na(cnvr.S66$S66),]
write.table(as.data.frame(cnvr.E65), file = "cnvr_E65.bed", sep = "\t",row.names = F, quote = F, col.names = F)
write.table(as.data.frame(cnvr.S66), file = "cnvr_S66.bed", sep = "\t",row.names = F, quote = F, col.names = F)
system("bedtools intersect -v -f 0.7 -r -a cnvr_E65.bed -b cnvr_S66.bed > cnvr_E65_S66.bed")
result_nul_E65_S66 <- as.data.frame(read.table("cnvr_E65_S66.bed", header = FALSE, sep="\t", stringsAsFactors=FALSE, quote=""))
result_nul_E65_S66$PXID <- "E65"
colnames(result_nul_E65_S66) <- c("seqnames","start","end","cnvr","PXID")

# E75/S76
cnvr.E75 <- filt.cnvr.epi.nul[,c("seqnames","start","end","E75")]
cnvr.S76 <- filt.cnvr.str.nul[,c("seqnames","start","end","S76")]
cnvr.E75 <- cnvr.E75[!is.na(cnvr.E75$E75),]
cnvr.S76 <- cnvr.S76[!is.na(cnvr.S76$S76),]
write.table(as.data.frame(cnvr.E75), file = "cnvr_E75.bed", sep = "\t",row.names = F, quote = F, col.names = F)
write.table(as.data.frame(cnvr.S76), file = "cnvr_S76.bed", sep = "\t",row.names = F, quote = F, col.names = F)
system("bedtools intersect -v -f 0.7 -r -a cnvr_E75.bed -b cnvr_S76.bed > cnvr_E75_S76.bed")
result_nul_E75_S76 <- as.data.frame(read.table("cnvr_E75_S76.bed", header = FALSE, sep="\t", stringsAsFactors=FALSE, quote=""))
result_nul_E75_S76$PXID <- "E75"
colnames(result_nul_E75_S76) <- c("seqnames","start","end","cnvr","PXID")

# E77/S78
cnvr.E77 <- filt.cnvr.epi.nul[,c("seqnames","start","end","E77")]
cnvr.S78 <- filt.cnvr.str.nul[,c("seqnames","start","end","S78")]
cnvr.E77 <- cnvr.E77[!is.na(cnvr.E77$E77),]
cnvr.S78 <- cnvr.S78[!is.na(cnvr.S78$S78),]
write.table(as.data.frame(cnvr.E77), file = "cnvr_E77.bed", sep = "\t",row.names = F, quote = F, col.names = F)
write.table(as.data.frame(cnvr.S78), file = "cnvr_S78.bed", sep = "\t",row.names = F, quote = F, col.names = F)
system("bedtools intersect -v -f 0.7 -r -a cnvr_E77.bed -b cnvr_S78.bed > cnvr_E77_S78.bed")
result_nul_E77_S78 <- as.data.frame(read.table("cnvr_E77_S78.bed", header = FALSE, sep="\t", stringsAsFactors=FALSE, quote=""))
result_nul_E77_S78$PXID <- "E77"
colnames(result_nul_E77_S78) <- c("seqnames","start","end","cnvr","PXID")

# g39/h40
cnvr.g39 <- filt.cnvr.epi.nul[,c("seqnames","start","end","g39")]
cnvr.h40 <- filt.cnvr.str.nul[,c("seqnames","start","end","h40")]
cnvr.g39 <- cnvr.g39[!is.na(cnvr.g39$g39),]
cnvr.h40 <- cnvr.h40[!is.na(cnvr.h40$h40),]
write.table(as.data.frame(cnvr.g39), file = "cnvr_g39.bed", sep = "\t",row.names = F, quote = F, col.names = F)
write.table(as.data.frame(cnvr.h40), file = "cnvr_h40.bed", sep = "\t",row.names = F, quote = F, col.names = F)
system("bedtools intersect -v -f 0.7 -r -a cnvr_g39.bed -b cnvr_h40.bed > cnvr_g39_h40.bed")
result_nul_g39_h40 <- as.data.frame(read.table("cnvr_g39_h40.bed", header = FALSE, sep="\t", stringsAsFactors=FALSE, quote=""))
result_nul_g39_h40$PXID <- "g39"
colnames(result_nul_g39_h40) <- c("seqnames","start","end","cnvr","PXID")

# Q17/R18
cnvr.Q17 <- filt.cnvr.epi.nul[,c("seqnames","start","end","Q17")]
cnvr.R18 <- filt.cnvr.str.nul[,c("seqnames","start","end","R18")]
cnvr.Q17 <- cnvr.Q17[!is.na(cnvr.Q17$Q17),]
cnvr.R18 <- cnvr.R18[!is.na(cnvr.R18$R18),]
write.table(as.data.frame(cnvr.Q17), file = "cnvr_Q17.bed", sep = "\t",row.names = F, quote = F, col.names = F)
write.table(as.data.frame(cnvr.R18), file = "cnvr_R18.bed", sep = "\t",row.names = F, quote = F, col.names = F)
system("bedtools intersect -v -f 0.7 -r -a cnvr_Q17.bed -b cnvr_R18.bed > cnvr_Q17_R18.bed")
result_nul_Q17_R18 <- as.data.frame(read.table("cnvr_Q17_R18.bed", header = FALSE, sep="\t", stringsAsFactors=FALSE, quote=""))
result_nul_Q17_R18$PXID <- "Q17"
colnames(result_nul_Q17_R18) <- c("seqnames","start","end","cnvr","PXID")

# U21/V22
cnvr.U21 <- filt.cnvr.epi.nul[,c("seqnames","start","end","U21")]
cnvr.V22 <- filt.cnvr.str.nul[,c("seqnames","start","end","V22")]
cnvr.U21 <- cnvr.U21[!is.na(cnvr.U21$U21),]
cnvr.V22 <- cnvr.V22[!is.na(cnvr.V22$V22),]
write.table(as.data.frame(cnvr.U21), file = "cnvr_U21.bed", sep = "\t",row.names = F, quote = F, col.names = F)
write.table(as.data.frame(cnvr.V22), file = "cnvr_V22.bed", sep = "\t",row.names = F, quote = F, col.names = F)
system("bedtools intersect -v -f 0.7 -r -a cnvr_U21.bed -b cnvr_V22.bed > cnvr_U21_V22.bed")
result_nul_U21_V22 <- as.data.frame(read.table("cnvr_U21_V22.bed", header = FALSE, sep="\t", stringsAsFactors=FALSE, quote=""))
result_nul_U21_V22$PXID <- "U21"
colnames(result_nul_U21_V22) <- c("seqnames","start","end","cnvr","PXID")

# W23/X24
cnvr.W23 <- filt.cnvr.epi.nul[,c("seqnames","start","end","W23")]
cnvr.X24 <- filt.cnvr.str.nul[,c("seqnames","start","end","X24")]
cnvr.W23 <- cnvr.W23[!is.na(cnvr.W23$W23),]
cnvr.X24 <- cnvr.X24[!is.na(cnvr.X24$X24),]
write.table(as.data.frame(cnvr.W23), file = "cnvr_W23.bed", sep = "\t",row.names = F, quote = F, col.names = F)
write.table(as.data.frame(cnvr.X24), file = "cnvr_X24.bed", sep = "\t",row.names = F, quote = F, col.names = F)
system("bedtools intersect -v -f 0.7 -r -a cnvr_W23.bed -b cnvr_X24.bed > cnvr_W23_X24.bed")
result_nul_W23_X24 <- as.data.frame(read.table("cnvr_W23_X24.bed", header = FALSE, sep="\t", stringsAsFactors=FALSE, quote=""))
result_nul_W23_X24$PXID <- "W23"
colnames(result_nul_W23_X24) <- c("seqnames","start","end","cnvr","PXID")

# Y25/Z26
cnvr.Y25 <- filt.cnvr.epi.nul[,c("seqnames","start","end","Y25")]
cnvr.Z26 <- filt.cnvr.str.nul[,c("seqnames","start","end","Z26")]
cnvr.Y25 <- cnvr.Y25[!is.na(cnvr.Y25$Y25),]
cnvr.Z26 <- cnvr.Z26[!is.na(cnvr.Z26$Z26),]
write.table(as.data.frame(cnvr.Y25), file = "cnvr_Y25.bed", sep = "\t",row.names = F, quote = F, col.names = F)
write.table(as.data.frame(cnvr.Z26), file = "cnvr_Z26.bed", sep = "\t",row.names = F, quote = F, col.names = F)
system("bedtools intersect -v -f 0.7 -r -a cnvr_Y25.bed -b cnvr_Z26.bed > cnvr_Y25_Z26.bed")
result_nul_Y25_Z26 <- as.data.frame(read.table("cnvr_Y25_Z26.bed", header = FALSE, sep="\t", stringsAsFactors=FALSE, quote=""))
result_nul_Y25_Z26$PXID <- "Y25"
colnames(result_nul_Y25_Z26) <- c("seqnames","start","end","cnvr","PXID")

# Bind CNVs that are filtered with germline CNVs, centromeric and telomeric regions
result.parous.raw <- rbind(result_par_a33_b34, result_par_AA27_BB28, result_par_CC29_DD30,
                           result_par_e37_f38, result_par_E41_S42, result_par_E59_S60,
                           result_par_E61_S62, result_par_E63_S64, result_par_E67_S68,
                           result_par_E71_S72, result_par_EE31_FF32, result_par_G7_H8,
                           result_par_I9_J10, result_par_K11_L12, result_par_M13_N14,
                           result_par_O15_P16, result_par_S19_T20)
result.parous <- pivot_wider(result.parous.raw, names_from = PXID, values_from = cnvr)

result.nulliparous.raw <- rbind(result_nul_A1_B2, result_nul_C3_D4, result_nul_c35_d36,
                                result_nul_E5_F6, result_nul_E65_S66, result_nul_E75_S76,
                                result_nul_E77_S78, result_nul_g39_h40, result_nul_Q17_R18,
                                result_nul_U21_V22, result_nul_W23_X24,result_nul_Y25_Z26)
result.nulliparous <- pivot_wider(result.nulliparous.raw, names_from = PXID, values_from = cnvr)

###########################################################################
###########################################################################

# Filtering: Common CNVRs

# acquire common CNVs from: http://dgv.tcag.ca/dgv/docs/GRCh37_hg19_variants_2020-02-25.txt

system("wget http://dgv.tcag.ca/dgv/docs/GRCh37_hg19_variants_2020-02-25.txt")
GRCh37_hg19_variants <- read.delim2("GRCh37_hg19_variants_2020-02-25.txt")
GRCh37_hg19_variants <- GRCh37_hg19_variants[,c(2:ncol(GRCh37_hg19_variants),1)]
colnames(GRCh37_hg19_variants) <- c("seqnames",colnames(GRCh37_hg19_variants[,c(2:ncol(GRCh37_hg19_variants))]))
GRCh37_hg19_variants$seqnames <- paste("chr",GRCh37_hg19_variants$seqnames, sep = "")

# Only include 1000 genomes project, Genome Aggregation Database (gnomAD_Structural_Variants)
GRCh37_hg19_variants <- GRCh37_hg19_variants[which(c(GRCh37_hg19_variants$reference == "1000_Genomes_Consortium_Pilot_Project" | 
                                                       GRCh37_hg19_variants$reference == "1000_Genomes_Consortium_Phase_3" |
                                                       GRCh37_hg19_variants$reference == "1000_Genomes_Consortium_Phase_1" |
                                                       GRCh37_hg19_variants$reference == "gnomAD_Structural_Variants")),]
write.table(as.data.frame(GRCh37_hg19_variants), file = "GRCh37_hg19_variants.bed", 
            sep = "\t",row.names = F, quote = F, col.names = F) 

# Parous
write.table(as.data.frame(result.parous), file = "result_parous.bed", sep = "\t",row.names = F, quote = F, col.names = F) 
system("bedtools intersect -v -f 0.7 -a result_parous.bed -b GRCh37_hg19_variants.bed > result_parous_filt.bed")
result.parous.filt <- as.data.frame(read.table("result_parous_filt.bed", header = FALSE, sep="\t",stringsAsFactors=FALSE, quote=""))
colnames(result.parous.filt) <- colnames(result.parous)

# Nulliparous
write.table(as.data.frame(result.nulliparous), file = "result_nulliparous.bed", sep = "\t",row.names = F, quote = F, col.names = F) 
system("bedtools intersect -v -f 0.7 -a result_nulliparous.bed -b GRCh37_hg19_variants.bed > result_nulliparous_filt.bed")
result.nulliparous.filt <- as.data.frame(read.table("result_nulliparous_filt.bed", header = FALSE, sep="\t",stringsAsFactors=FALSE, quote=""))
colnames(result.nulliparous.filt) <- colnames(result.nulliparous)

###########################################################################
###########################################################################

# Further filter using UCSC Genome Browser (HG19 and HG38) - Gap Track and RepeatMasker Track.
# Manual curate. Further filter CNVRs that are mapped to:
# Excluded CNVs mapped to centromeres, telomeres, heterochromatin gaps and blocks of repeats
result.parous.filt <- result.parous.filt[-c(4,9,18,25,26,47,55,56,83,94,96,102,111),]
result.nulliparous.filt <- result.nulliparous.filt[-c(1,2,31,32,34,66,76),]

###########################################################################
###########################################################################

# Annotate
system("wget http://hgdownload.soe.ucsc.edu/goldenPath/hg19/database/refGene.txt.gz")
system("gunzip refGene.txt.gz")
refGene <- as.data.frame(read.table("refGene.bed",header = FALSE, sep="\t",stringsAsFactors=FALSE, quote=""))

# Parous (Filtered CNVRs)
system("awk '{print $3"\t"$5"\t"$6"\t"$13}' refGene.txt | sort -n -k2 > refGene.bed")
write.table(as.data.frame(result.parous.filt), file = "result_parous_filt.bed",  sep = "\t",row.names = F, quote = F, col.names = F)
system("bedtools intersect -a result_parous_filt.bed -b refGene.bed -wao > annot_result_parous_filt.bed")
annot.result.parous.filt <- as.data.frame(read.table("annot_result_parous_filt.bed", header = FALSE, sep="\t",stringsAsFactors=FALSE, quote=""))
colnames(annot.result.parous.filt) <- c("Chr","CNVR_start","CNVR_end", colnames(result.parous.filt[,4:ncol(result.parous.filt)]),"Chr","Gene_start","Gene_end","Gene_ID","Overlaps")
annot.result.parous.filt.unique <- annot.result.parous.filt[!duplicated(annot.result.parous.filt$Gene_ID),]

# Nulliparous (Filtered CNVRs)
write.table(as.data.frame(result.nulliparous.filt), file = "result_nulliparous_filt.bed", sep = "\t",row.names = F, quote = F, col.names = F)
system("bedtools intersect -a result_nulliparous_filt.bed -b refGene.bed -wao > annot_result_nulliparous_filt.bed")
annot.result.nulliparous.filt <- as.data.frame(read.table("annot_result_nulliparous_filt.bed", header = FALSE, sep="\t",stringsAsFactors=FALSE, quote=""))
colnames(annot.result.nulliparous.filt) <- c("Chr","CNVR_start","CNVR_end", colnames(result.nulliparous.filt[,4:ncol(result.nulliparous.filt)]),"Chr","Gene_start","Gene_end","Gene_ID","Overlaps")
annot.result.nulliparous.filt.unique <- annot.result.nulliparous.filt[!duplicated(annot.result.nulliparous.filt$Gene_ID),]

###########################################################################
###########################################################################

# Exclude donor E61 (appeared to have hyperchromosomal instability)
# CNV  tally without donor E61 (parous)

result.parous.filt.exclude_E61 <- result.parous.filt
result.parous.filt.exclude_E61 <- pivot_longer(result.parous.filt.exclude_E61,cols = colnames(result.parous.filt.exclude_E61[,4:ncol(result.parous.filt.exclude_E61)]))
result.parous.filt.exclude_E61 <- result.parous.filt.exclude_E61[!result.parous.filt.exclude_E61$name == "E61",]
result.parous.filt.exclude_E61 <- result.parous.filt.exclude_E61[!is.na(result.parous.filt.exclude_E61$value),]
result.parous.filt.exclude_E61 <- pivot_wider(result.parous.filt.exclude_E61, names_from = name, values_from = value)

write.table(as.data.frame(result.parous.filt.exclude_E61), file = "result_parous_filt_exclude_E61.bed", sep = "\t",row.names = F, quote = F, col.names = F)
system("bedtools intersect -a result_parous_filt_exclude_E61.bed -b refGene.bed -wao > annot_result_parous_filt_exclude_E61.bed")
annot.result.parous.filt.exclude_E61 <- as.data.frame(read.table("annot_result_parous_filt_exclude_E61.bed", header = FALSE, sep="\t",stringsAsFactors=FALSE, quote=""))
colnames(annot.result.parous.filt.exclude_E61) <- c("Chr","CNVR_start","CNVR_end", colnames(result.parous.filt.exclude_E61[,4:ncol(result.parous.filt.exclude_E61)]), "Chr","Gene_start","Gene_end","Gene_ID","Overlaps")
annot.result.parous.filt.exclude_E61.unique <- annot.result.parous.filt.exclude_E61[!duplicated(annot.result.parous.filt.exclude_E61$Gene_ID),]

###########################################################################
###########################################################################

# Number of CNVs and unique genes post-filter
# CNVs
dim(result.parous.filt) # 123
dim(result.nulliparous.filt) # 69
dim(result.parous.filt.exclude_E61) # 45

# Genes
length(unique(annot.result.parous.filt$Gene_ID)) # 1124
length(unique(annot.result.nulliparous.filt$Gene_ID)) # 696
length(unique(annot.result.parous.filt.exclude_E61$Gene_ID)) # 506

# gene annotation CSV file
write.csv(annot.result.parous.filt.unique, file = "genes_parous.csv")
write.csv(annot.result.nulliparous.filt.unique, file = "genes_nulliparous.csv")
write.csv(annot.result.parous.filt.exclude_E61.unique, file = "genes_parous_excluding_E61.csv")

###########################################################################
###########################################################################

# Total of CNVR per Donor
# Parous
cnvr.count.par.df.with_na <- data.frame(lapply(data.frame(lapply(as.data.frame(result.parous.filt),
                                                                 function(x){
                                                                   gsub("CN2",NA,x)
                                                                 })), function(x){
                                                                   gsub("CN","",x)
                                                                 }))
cnvr.count.par.df.raw <- data.frame(apply(cnvr.count.par.df.with_na, 2, function(x) length(which(!is.na(x)))),
                                    apply(cnvr.count.par.df.with_na, 2, function(x) length(which(x <= 1))),
                                    apply(cnvr.count.par.df.with_na, 2, function(x) length(which(x >= 3))))

colnames(cnvr.count.par.df.raw) <- c("total_cnvr","deletion","amplification")
cnvr.count.par.df.raw <- cnvr.count.par.df.raw[-c(1:3),]

# Nulliparous
cnvr.count.nul.df.with_na <- data.frame(lapply(data.frame(lapply(as.data.frame(result.nulliparous.filt),
                                                                 function(x){
                                                                   gsub("CN2",NA,x)
                                                                 })), function(x){
                                                                   gsub("CN","",x)
                                                                 }))
cnvr.count.nul.df.raw <- data.frame(apply(cnvr.count.nul.df.with_na, 2, function(x) length(which(!is.na(x)))),
                                    apply(cnvr.count.nul.df.with_na, 2, function(x) length(which(x <= 1))),
                                    apply(cnvr.count.nul.df.with_na, 2, function(x) length(which(x >= 3))))

colnames(cnvr.count.nul.df.raw) <- c("total_cnvr","deletion","amplification")
cnvr.count.nul.df.raw <- cnvr.count.nul.df.raw[-c(1:3),]

###########################################################################
###########################################################################

# merge CNV counts per with clinical data from Cereser et al. (2020)

clin.data <- read.csv("clinical_data.csv", header = T)
clin.data.par <- clin.data[clin.data$Parity == "Parous",]
clin.data.nul <- clin.data[clin.data$Parity == "Nulliparous",]
clin.data.par <- clin.data.par[order(clin.data.par$Sample, decreasing = F),]
clin.data.nul <- clin.data.nul[order(clin.data.nul$Sample, decreasing = F),]

cnvr.count.par.df <- cbind(cnvr.count.par.df.raw,clin.data.par)
cnvr.count.nul.df <- cbind(cnvr.count.nul.df.raw,clin.data.nul)
cnvr.count.par.df2 <- cnvr.count.par.df
cnvr.count.nul.df2 <- cnvr.count.nul.df

cnvr.count.par.df <- mutate(cnvr.count.par.df, Year.after.1st.birth = Age - Age.1st.birth)
cnvr.count.nul.df$Year.after.1st.birth <- NA

###########################################################################
###########################################################################

# T.test for age, prior removing outliers
shapiro.test(cnvr.count.par.df$Age) # not normal
shapiro.test(cnvr.count.nul.df$Age) # normal

library(ggpubr)
# QQ plot for T-test: age
qq.age.t.par <- ggqqplot(cnvr.count.par.df$Age) + labs(title = "Parous: Age") + 
  theme(plot.margin = unit(c(0.2, 0.2, 0.2, 0.2), "cm"), plot.title = element_text(face = "bold", size = 12),
        axis.title.x = element_text(face = "bold"), axis.title.y = element_text(face = "bold")) + 
  xlim(-2,2) + annotate(geom="text", x = -1.5, y = 75, label = paste("P =", round(shapiro.test(cnvr.count.par.df$Age)$p.value, 3)))

qq.age.t.nul<- ggqqplot(cnvr.count.nul.df$Age) + labs(title = "Nulliparous: Age") + 
  theme(plot.margin = unit(c(0.2, 0.2, 0.2, 0.2), "cm"), plot.title = element_text(face = "bold", size = 12),
        axis.title.x = element_text(face = "bold"), axis.title.y = element_text(face = "bold")) + 
  xlim(-2,2) + annotate(geom="text", x = -1.4, y = 60, label = paste("P =", round(shapiro.test(cnvr.count.nul.df$Age)$p.value, 2)))

t.test.age.A <- data.frame(matrix(NA, nrow = 17, ncol = 2))
t.test.age.A$X1 <- cnvr.count.par.df$Age
t.test.age.A[is.na(t.test.age.A)] <- "Parous"
t.test.age.B <- data.frame(matrix(NA, nrow = 12, ncol = 2))
t.test.age.B$X1 <- cnvr.count.nul.df$Age
t.test.age.B[is.na(t.test.age.B)] <- "Nulliparous"
t.test.age <- rbind(t.test.age.A, t.test.age.B)
colnames(t.test.age) <- c("Age", "Parity")

# Age T-test (Mann-Whitney)
t.test.age.plot <- ggboxplot(t.test.age, x = "Parity", y = "Age", color = "Parity", palette = c("#005CAB","#E31B23"),add = "jitter") +  
  stat_compare_means(aes(label = ..p.signif..), label.x = 1.5, label.y = 80, method = "wilcox.test", comparisons = parity_comparisons) + ylab("Age (yrs)") + xlab("") +
  theme(plot.margin = unit(c(0.2, 0.2, 0.2, 0.2), "cm"), legend.position = "bottom", 
        axis.text.x = element_text(angle = 30, hjust=1, face = "bold"),
        axis.title.y = element_text(face="bold"))

summary.par.age <- data.frame(unclass(summary(t.test.age.A$X1)),check.names = FALSE, stringsAsFactors = FALSE)
summary.nul.age <- data.frame(unclass(summary(t.test.age.B$X1)), check.names = FALSE, stringsAsFactors = FALSE)
summary.par_nul.age <- cbind(summary.par.age, summary.nul.age)
colnames(summary.par_nul.age) <-c("Parous","Nulliparous")
is.num.age <- sapply(summary.par_nul.age, is.numeric) # round off to 2 decimal places
summary.par_nul.age[is.num.age] <- lapply(summary.par_nul.age[is.num.age], round, 2)
summary.par_nul.age <- as.data.frame(t(summary.par_nul.age))
colnames(summary.par_nul.age) <- c("Minimum","1st Quantile","Median", "Mean","3rd Quantile","Maximum")
summary.par_nul.age <- ggtexttable(summary.par_nul.age, theme = ttheme("light"))

###########################################################################
###########################################################################
# Outliers test for T-test
library("outliers")
grubbs.test(cnvr.count.par.df$total_cnvr)
cnvr.count.par.df <- cnvr.count.par.df[!cnvr.count.par.df$total_cnvr == 84,]
grubbs.test(cnvr.count.par.df$total_cnvr)
grubbs.test(cnvr.count.par.df$amplification)
grubbs.test(cnvr.count.par.df$deletion)
grubbs.test(cnvr.count.par.df$Age)
grubbs.test(cnvr.count.par.df$Age.1st.birth)

grubbs.test(cnvr.count.nul.df$total_cnvr)
grubbs.test(cnvr.count.nul.df$amplification)
grubbs.test(cnvr.count.nul.df$deletion)
grubbs.test(cnvr.count.nul.df$Age)

###########################################################################
###########################################################################

# Normality test for T-Test
# Normal, p > 0.05
shapiro.test(cnvr.count.par.df$total_cnvr) # normal
shapiro.test(cnvr.count.par.df$amplification) # normal
shapiro.test(cnvr.count.par.df$deletion) # not normal
shapiro.test(cnvr.count.par.df$Age) # not normal
shapiro.test(cnvr.count.par.df$Age.1st.birth)  # not normal

shapiro.test(cnvr.count.nul.df$total_cnvr) # not normal
shapiro.test(cnvr.count.nul.df$amplification)  # not normal
shapiro.test(cnvr.count.nul.df$deletion)  # not normal
shapiro.test(cnvr.count.nul.df$Age) # normal

# QQ plot for T-test: cnvr
qq.cnvr.t.par <- ggqqplot(cnvr.count.par.df$total_cnvr) + labs(title = "Parous: CNVs") + 
  theme(plot.margin = unit(c(0.2, 0.2, 0.2, 0.2), "cm"), plot.title = element_text(face = "bold", size = 12),
        axis.title.x = element_text(face = "bold"), axis.title.y = element_text(face = "bold")) + xlim(-2,2) +
  annotate(geom="text", x = -1.4, y = 15, label = paste("P =", round(shapiro.test(cnvr.count.par.df$total_cnvr)$p.value, 2)))

qq.cnvr.t.nul <- ggqqplot(cnvr.count.nul.df$total_cnvr) + labs(title = "Nulliparous: CNVs") + 
  theme(plot.margin = unit(c(0.2, 0.2, 0.2, 0.2), "cm"), plot.title = element_text(face = "bold", size = 12),
        axis.title.x = element_text(face = "bold"), axis.title.y = element_text(face = "bold")) + xlim(-2,2) +
  annotate(geom="text", x = -1.3, y = 35, label = paste("P =", round(shapiro.test(cnvr.count.nul.df$total_cnvr)$p.value, 3)))

# QQ plot for T-test: amplification / gain
qq.amps.t.par <- ggqqplot(cnvr.count.par.df$amplification) + labs(title = "Parous: Gain") + 
  theme(plot.margin = unit(c(0.2, 0.2, 0.2, 0.2), "cm"), plot.title = element_text(face = "bold", size = 12),
        axis.title.x = element_text(face = "bold"), axis.title.y = element_text(face = "bold")) + xlim(-2,2) +
  annotate(geom="text", x = -1.5, y = 12, label = paste("P =", round(shapiro.test(cnvr.count.par.df$amplification)$p.value, 2)))

qq.amps.t.nul <- ggqqplot(cnvr.count.nul.df$amplification) + labs(title = "Nulliparous: Gain") + 
  theme(plot.margin = unit(c(0.2, 0.2, 0.2, 0.2), "cm"), plot.title = element_text(face = "bold", size = 12),
        axis.title.x = element_text(face = "bold"), axis.title.y = element_text(face = "bold")) + xlim(-2,2) +
  annotate(geom="text", x = -1.5, y = 30, label = paste("P =", round(shapiro.test(cnvr.count.nul.df$amplification)$p.value, 3)))

# QQ plot for T-test: deletion / loss 
qq.dels.t.par <- ggqqplot(cnvr.count.par.df$deletion) + labs(title = "Parous: Loss") + 
  theme(plot.margin = unit(c(0.2, 0.2, 0.2, 0.2), "cm"), plot.title = element_text(face = "bold", size = 12),
        axis.title.x = element_text(face = "bold"), axis.title.y = element_text(face = "bold")) + xlim(-2,2) +
  annotate(geom="text", x = -1.5, y = 8, label = paste("P =", round(shapiro.test(cnvr.count.par.df$deletion)$p.value, 5)))

qq.dels.t.nul <- ggqqplot(cnvr.count.nul.df$deletion) + labs(title = "Nulliparous: Loss") + 
  theme(plot.margin = unit(c(0.2, 0.2, 0.2, 0.2), "cm"), plot.title = element_text(face = "bold", size = 12),
        axis.title.x = element_text(face = "bold"), axis.title.y = element_text(face = "bold")) + xlim(-2,2) +
  annotate(geom="text", x = -1.5, y = 10, label = paste("P =", round(shapiro.test(cnvr.count.nul.df$deletion)$p.value, 3)))

###########################################################################
###########################################################################

# T-test
t.test.cnvr.A <- data.frame(matrix(NA, nrow = 16, ncol = 2))
t.test.cnvr.A$X1 <- cnvr.count.par.df$total_cnvr
t.test.cnvr.A[is.na(t.test.cnvr.A)] <- "Parous"
t.test.cnvr.B <- data.frame(matrix(NA, nrow = 12, ncol = 2))
t.test.cnvr.B$X1 <- cnvr.count.nul.df$total_cnvr
t.test.cnvr.B[is.na(t.test.cnvr.B)] <- "Nulliparous"
t.test.cnvr <- rbind(t.test.cnvr.A, t.test.cnvr.B)
colnames(t.test.cnvr) <- c("CNVR", "Parity")

# T-test: Deletion
t.test.deletion.A <- data.frame(matrix(NA, nrow = 16, ncol = 2))
t.test.deletion.A$X1 <- cnvr.count.par.df$deletion
t.test.deletion.A[is.na(t.test.deletion.A)] <- "Parous"
t.test.deletion.B <- data.frame(matrix(NA, nrow = 12, ncol = 2))
t.test.deletion.B$X1 <- cnvr.count.nul.df$deletion
t.test.deletion.B[is.na(t.test.deletion.B)] <- "Nulliparous"
t.test.deletion <- rbind(t.test.deletion.A, t.test.deletion.B)
colnames(t.test.deletion) <- c("Deletion", "Parity")

# T-test: Amplification
t.test.amplification.A <- data.frame(matrix(NA, nrow = 16, ncol = 2))
t.test.amplification.A$X1 <- cnvr.count.par.df$amplification
t.test.amplification.A[is.na(t.test.amplification.A)] <- "Parous"
t.test.amplification.B <- data.frame(matrix(NA, nrow = 12, ncol = 2))
t.test.amplification.B$X1 <- cnvr.count.nul.df$amplification
t.test.amplification.B[is.na(t.test.amplification.B)] <- "Nulliparous"
t.test.amplification <- rbind(t.test.amplification.A, t.test.amplification.B)
colnames(t.test.amplification) <- c("Amplification", "Parity")

# T-test plots
# Total CNVR
t.test.cnvr.plot <- ggboxplot(t.test.cnvr, x = "Parity", y = "CNVR", color = "Parity", palette = c("#005CAB","#E31B23"),add = "jitter") +  
  stat_compare_means(aes(label = ..p.signif..), label.x = 1.5, label.y = 40, method = "wilcox.test", comparisons = parity_comparisons) + 
  ylab("Total CNVRs per Donor") + xlab("") +
  theme(plot.margin = unit(c(0.2, 0.2, 0.2, 0.2), "cm"), legend.position = "bottom", 
        axis.text.x = element_text(angle = 30, hjust=1, face = "bold"),
        axis.title.y = element_text(face="bold"))

# Deletion
t.test.deletion.plot <- ggboxplot(t.test.deletion, x = "Parity", y = "Deletion", color = "Parity", palette = c("#005CAB","#E31B23"),add = "jitter") +  
  stat_compare_means(aes(label = ..p.signif..), label.x = 1.5, label.y = 12, method = "wilcox.test", comparisons = parity_comparisons) + 
  ylab("Total Deletions per Donor") + xlab("") +
  theme(plot.margin = unit(c(0.2, 0.2, 0.2, 0.2), "cm"), legend.position = "bottom", 
        axis.text.x = element_text(angle = 30, hjust=1, face = "bold"),
        axis.title.y = element_text(face="bold"))

# Wilcox.test: Amplification: No statistical significant: error cannot compute exact p-value with ties
t.test.amplification.plot <- ggboxplot(t.test.amplification, x = "Parity", y = "Amplification", color = "Parity", palette = c("#005CAB","#E31B23"),add = "jitter") + 
  stat_compare_means(aes(label = ..p.signif..), label.x = 1.5, label.y = 36, method = "wilcox.test", comparisons = parity_comparisons) + 
  ylab("Total Amplifications per Donor") + xlab("") + ylim(0,36) +
  theme(plot.margin = unit(c(0.2, 0.2, 0.2, 0.2), "cm"), legend.position = "bottom", 
        axis.text.x = element_text(angle = 30, hjust=1, face = "bold"),
        axis.title.y = element_text(face="bold"))

# Descriptive Stats: Total CNVR
summary.par.cnvr <- data.frame(unclass(summary(t.test.cnvr.A$X1)), check.names = FALSE, stringsAsFactors = FALSE)
summary.nul.cnvr <- data.frame(unclass(summary(t.test.cnvr.B$X1)), check.names = FALSE, stringsAsFactors = FALSE)
summary.par_nul.cnvr <- cbind(summary.par.cnvr, summary.nul.cnvr)
colnames(summary.par_nul.cnvr) <-c("Parous","Nulliparous")
is.num.cnvr <- sapply(summary.par_nul.cnvr, is.numeric) # round off to 2 decimal places
summary.par_nul.cnvr[is.num.cnvr] <- lapply(summary.par_nul.cnvr[is.num.cnvr], round, 2)
summary.par_nul.cnvr <- as.data.frame(t(summary.par_nul.cnvr))
colnames(summary.par_nul.cnvr) <- c("Minimum","1st Quantile","Median", "Mean","3rd Quantile","Maximum")
summary.par_nul.cnvr <- ggtexttable(summary.par_nul.cnvr, theme = ttheme("light"))

# Descriptive Stats: Deletion
summary.par.dels <- data.frame(unclass(summary(t.test.deletion.A$X1)), check.names = FALSE, stringsAsFactors = FALSE)
summary.nul.dels <- data.frame(unclass(summary(t.test.deletion.B$X1)), check.names = FALSE, stringsAsFactors = FALSE)
summary.par_nul.dels <- cbind(summary.par.dels, summary.nul.dels)
colnames(summary.par_nul.dels) <-c("Parous","Nulliparous")
is.num.dels <- sapply(summary.par_nul.dels, is.numeric)
summary.par_nul.dels[is.num.dels] <- lapply(summary.par_nul.dels[is.num.dels], round, 2)
summary.par_nul.dels <- as.data.frame(t(summary.par_nul.dels))
colnames(summary.par_nul.dels) <- c("Minimum","1st Quantile","Median", "Mean","3rd Quantile","Maximum")
summary.par_nul.dels <- ggtexttable(summary.par_nul.dels, theme = ttheme("light"))

# Descriptive Stats: Amplification
summary.par.amps <- data.frame(unclass(summary(t.test.amplification.A$X1)), check.names = FALSE, stringsAsFactors = FALSE)
summary.nul.amps <- data.frame(unclass(summary(t.test.amplification.B$X1)), check.names = FALSE, stringsAsFactors = FALSE)
summary.par_nul.amps <- cbind(summary.par.amps, summary.nul.amps)
colnames(summary.par_nul.amps) <-c("Parous","Nulliparous")
is.num.amps <- sapply(summary.par_nul.amps, is.numeric)
summary.par_nul.amps[is.num.amps] <- lapply(summary.par_nul.amps[is.num.amps], round, 2)
summary.par_nul.amps <- as.data.frame(t(summary.par_nul.amps))
colnames(summary.par_nul.amps) <- c("Minimum","1st Quantile","Median", "Mean","3rd Quantile","Maximum")
summary.par_nul.amps <- ggtexttable(summary.par_nul.amps, theme = ttheme("light"))

# T-Test plots
p1.a <- ggarrange(t.test.cnvr.plot, ggplot() + theme_void(),
                  t.test.amplification.plot, ggplot() + theme_void(),
                  t.test.deletion.plot, ggplot() + theme_void(), t.test.age.plot,
                  widths = c(1, 0.2, 1, 0.2, 1, 0.2, 1), ncol = 7, nrow = 1,
                  labels = c("A","","B ","","C ","","D "), label.x = -0.1, label.y = 1,
                  common.legend = T,legend = "bottom") + 
  theme(plot.margin = unit(c(0.3, 0.3, 0.3, 0.3), "cm"),
        legend.position = "bottom")

p1.b <- ggarrange(summary.par_nul.cnvr, ggplot() + theme_void(), summary.par_nul.amps,
                  summary.par_nul.dels, ggplot() + theme_void(), summary.par_nul.age,
                  ncol = 3, nrow = 2, widths = c(1, 0.3, 1, 1, 0.3, 1))+ 
  theme(plot.margin = unit(c(1.1, 1.1, 1.1, 1.1), "cm"))

tiff("final_plot5.tiff", width = 12, height = 10, units = 'in', res = 300, compression = "none")
ggarrange(p1.a, p1.b, ncol = 1, nrow = 2, common.legend = T) +
  theme(plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm"))
dev.off()


###########################################################################
###########################################################################

# Correlation test
# Age vs CNVR
# Remove parous donors with >10 years gap with last pregnancy and tissue collection
# Recheck normality in parous cohort
cnvr.count.par_exclude_10_yrs <- cnvr.count.par.df[!cnvr.count.par.df$Year.after.1st.birth > 10,]
shapiro.test(cnvr.count.par_exclude_10_yrs$total_cnvr) # normal
shapiro.test(cnvr.count.par_exclude_10_yrs$amplification) # normal
shapiro.test(cnvr.count.par_exclude_10_yrs$deletion) # not normal
shapiro.test(cnvr.count.par_exclude_10_yrs$Age) # normal
shapiro.test(cnvr.count.par_exclude_10_yrs$Age.1st.birth) # normal

# QQ plot for correlation: age
# QQ plot for nulliparous for correlation is the same as t.test
qq.age.cor.par <- ggqqplot(cnvr.count.par_exclude_10_yrs$Age) + labs(title = "Parous: Age") + 
  theme(plot.margin = unit(c(0.2, 0.2, 0.2, 0.2), "cm"), plot.title = element_text(face = "bold", size = 12),
        axis.title.x = element_text(face = "bold"), axis.title.y = element_text(face = "bold")) + xlim(-2,2) +
  annotate(geom="text", x = -1.5, y = 55, label = paste("P =", round(shapiro.test(cnvr.count.par_exclude_10_yrs$Age)$p.value, 2)))

qq.age.1st.cor.par <- ggqqplot(cnvr.count.par_exclude_10_yrs$Age.1st.birth) + labs(title = "Parous: Age (1st Birth)") + 
  theme(plot.margin = unit(c(0.2, 0.2, 0.2, 0.2), "cm"), plot.title = element_text(face = "bold", size = 12),
        axis.title.x = element_text(face = "bold"), axis.title.y = element_text(face = "bold")) + xlim(-2,2) +
  annotate(geom="text", x = -1.5, y = 55, label = paste("P =", round(shapiro.test(cnvr.count.par_exclude_10_yrs$Age.1st.birth)$p.value, 2)))

# QQ plot for correlation: cnvr
qq.cnvr.cor.par <- ggqqplot(cnvr.count.par_exclude_10_yrs$total_cnvr) + labs(title = "Parous: CNVs") + 
  theme(plot.margin = unit(c(0.2, 0.2, 0.2, 0.2), "cm"), plot.title = element_text(face = "bold", size = 12),
        axis.title.x = element_text(face = "bold"), axis.title.y = element_text(face = "bold")) + xlim(-2,2) +
  annotate(geom="text", x = -1.5, y = 15,  label = paste("P =", round(shapiro.test(cnvr.count.par_exclude_10_yrs$total_cnvr)$p.value, 2)))

# QQ plot for correlation: amplification
qq.amps.cor.par <- ggqqplot(cnvr.count.par_exclude_10_yrs$amplification) + labs(title = "Parous: Gain") + 
  theme(plot.margin = unit(c(0.2, 0.2, 0.2, 0.2), "cm"), plot.title = element_text(face = "bold", size = 12),
        axis.title.x = element_text(face = "bold"), axis.title.y = element_text(face = "bold")) + xlim(-2,2) +
  annotate(geom="text", x = -1.5, y = 11, label = paste("P =", round(shapiro.test(cnvr.count.par_exclude_10_yrs$amplification)$p.value, 2)))

# QQ plot for correlation: deletion
qq.dels.cor.par <- ggqqplot(cnvr.count.par_exclude_10_yrs$deletion) + labs(title = "Parous: Loss") + 
  theme(plot.margin = unit(c(0.2, 0.2, 0.2, 0.2), "cm"), plot.title = element_text(face = "bold", size = 12),
        axis.title.x = element_text(face = "bold"), axis.title.y = element_text(face = "bold")) + xlim(-2,2) +
  annotate(geom="text", x = -1.5, y = 11,  label = paste("P =", round(shapiro.test(cnvr.count.par_exclude_10_yrs$deletion)$p.value, 4)))

###########################################################################
###########################################################################

# Correlation test plot

# Age vs CNVs
cor_cnvr <- ggplot()+
  geom_smooth(data = cnvr.count.par_exclude_10_yrs, aes(x = Age, y = total_cnvr), se = T, method = "lm")+
  geom_smooth(data = cnvr.count.nul.df, aes(x = Age, y = total_cnvr), se = T, method = "lm", color = "#E31B23", fill = "darkgray")+
  stat_cor(data = cnvr.count.par_exclude_10_yrs, aes(x = Age, y = total_cnvr), method = "pearson", p.accuracy = 0.001, r.accuracy = 0.01, label.x = 24, label.y = 40, color = "#005CAB") +
  stat_cor(data = cnvr.count.nul.df, aes(x = Age, y = total_cnvr), method = "spearman",p.accuracy = 0.001, r.accuracy = 0.01, label.x = 24, label.y = 38.1, color = "#E31B23") +
  geom_point(data = cnvr.count.par_exclude_10_yrs, aes(x = Age, y = total_cnvr, fill = Parity), color = "#005CAB") +
  geom_point(data = cnvr.count.nul.df, aes(x = Age, y = total_cnvr, fill = Parity), color = "#E31B23") +
  ylim(0,40) + ylab("Total CNVRs per Donor") + xlab("Age (years)") + theme_classic() +
  theme(legend.title = element_text(size=15, face="bold"), legend.text = element_text(size=12),
        plot.margin = unit(c(0.2, 0.2, 0.2, 0.2), "cm"), legend.position = "bottom",
        axis.title.x = element_text(face="bold"),axis.title.y = element_text(face="bold"))

# Age vs Deletion
cor_dels <- ggplot()+
  geom_smooth(data = cnvr.count.par_exclude_10_yrs, aes(x = Age, y = deletion), se = T, method = "lm")+
  geom_smooth(data = cnvr.count.nul.df, aes(x = Age, y = deletion), se = T, method = "lm", color = "#E31B23", fill = "darkgray")+
  stat_cor(data = cnvr.count.par_exclude_10_yrs, aes(x = Age, y = deletion),  method = "spearman", p.accuracy = 0.001, r.accuracy = 0.01, label.x = 24, label.y = 12, color = "#005CAB") +
  stat_cor(data = cnvr.count.nul.df, aes(x = Age, y = deletion),  method = "spearman",p.accuracy = 0.001, r.accuracy = 0.01, label.x = 24, label.y = 11.4, color = "#E31B23") +
  geom_point(data = cnvr.count.par_exclude_10_yrs, aes(x = Age, y = deletion, fill = Parity), color = "#005CAB", alpha = 0.9) +
  geom_point(data = cnvr.count.nul.df, aes(x = Age, y = deletion, fill = Parity), color = "#E31B23", alpha = 0.9) +
  ylim(0,12) + ylab("Total Deletions per Donor") + xlab("Age (years)") + theme_classic() +
  theme(legend.title = element_text(size=15, face="bold"), legend.text = element_text(size=12),
        plot.margin = unit(c(0.2, 0.2, 0.2, 0.2), "cm"), legend.position = "bottom",
        axis.title.x = element_text(face="bold"),axis.title.y = element_text(face="bold"))

# Age vs Amplification
cor_amps <- ggplot()+
  geom_smooth(data = cnvr.count.par_exclude_10_yrs, aes(x = Age, y = amplification), se = T, method = "lm") +
  geom_smooth(data = cnvr.count.nul.df, aes(x = Age, y = amplification), se = T, method = "lm", color = "#E31B23", fill = "darkgray")+
  stat_cor(data = cnvr.count.par_exclude_10_yrs, aes(x = Age, y = amplification), method = "pearson", p.accuracy = 0.001, r.accuracy = 0.01, label.x = 22, label.y = 35, color = "#005CAB") +
  stat_cor(data = cnvr.count.nul.df, aes(x = Age, y = amplification), method = "spearman",p.accuracy = 0.001, r.accuracy = 0.01, label.x = 22, label.y = 33.3, color = "#E31B23") +
  geom_point(data = cnvr.count.par_exclude_10_yrs, aes(x = Age, y = amplification, fill = Parity), color = "#005CAB") +
  geom_point(data = cnvr.count.nul.df, aes(x = Age, y = amplification, fill = Parity), color = "#E31B23") +
  ylim(0,35) + ylab("Total Amplifications per Donor") + xlab("Age (years)") + theme_classic() +
  theme(legend.title = element_text(size=15, face="bold"), legend.text = element_text(size=12),
        plot.margin = unit(c(0.2, 0.2, 0.2, 0.2), "cm"), legend.position = "bottom",
        axis.title.x = element_text(face="bold"),axis.title.y = element_text(face="bold"))

# Age at first bith were explore but were not reported
# Age at first birth vs CNVR
cor_age_first_cnvrs <- ggplot()+
  geom_smooth(data = cnvr.count.par_exclude_10_yrs, aes(x = Age.1st.birth, y = total_cnvr), se = T, method = "lm")+
  stat_cor(data = cnvr.count.par_exclude_10_yrs, aes(x = Age.1st.birth, y = total_cnvr), method = "pearson", p.accuracy = 0.001, r.accuracy = 0.01, label.x = 18, label.y = 15, color = "#005CAB") +
  geom_point(data = cnvr.count.par_exclude_10_yrs, aes(x = Age.1st.birth, y = total_cnvr, fill = Parity), color = "#005CAB") +
  ylim(0,15) + ylab("Total CNVRs per Donor") + xlab("Age at First Birth (yrs)") + theme_classic() +
  theme(legend.title = element_text(size=15, face="bold"), legend.text = element_text(size=12),
        plot.margin = unit(c(0.2, 0.2, 0.2, 0.2), "cm"), legend.position = "bottom",
        axis.title.x = element_text(face="bold"),axis.title.y = element_text(face="bold"))

# Age at first birth vs deletion
cor_age_first_dels <- ggplot()+
  geom_smooth(data = cnvr.count.par_exclude_10_yrs, aes(x = Age.1st.birth, y = deletion), se = T, method = "lm")+
  stat_cor(data = cnvr.count.par_exclude_10_yrs, aes(x = Age.1st.birth, y = deletion), method = "spearman", p.accuracy = 0.001, r.accuracy = 0.01, label.x = 18, label.y = 7.5, color = "#005CAB") +
  geom_point(data = cnvr.count.par_exclude_10_yrs, aes(x = Age.1st.birth, y = deletion, fill = Parity), color = "#005CAB") +
  ylim(0,7.5) + ylab("Total Deletions per Donor") + xlab("Age at First Birth (yrs)") + theme_classic() +
  theme(legend.title = element_text(size=15, face="bold"), legend.text = element_text(size=12),
        plot.margin = unit(c(0.2, 0.2, 0.2, 0.2), "cm"), legend.position = "bottom",
        axis.title.x = element_text(face="bold"),axis.title.y = element_text(face="bold"))

# Age at first birth vs amplification
cor_age_first_amps <- ggplot()+
  geom_smooth(data = cnvr.count.par_exclude_10_yrs, aes(x = Age.1st.birth, y = amplification), se = T, method = "lm")+
  stat_cor(data = cnvr.count.par_exclude_10_yrs, aes(x = Age.1st.birth, y = amplification), method = "pearson", p.accuracy = 0.001, r.accuracy = 0.01, label.x = 18, label.y = 15, color = "#005CAB") +
  geom_point(data = cnvr.count.par_exclude_10_yrs, aes(x = Age.1st.birth, y = amplification, fill = Parity), color = "#005CAB") +
  ylim(0,15) + ylab("Total Amplifications per Donor") + xlab("Age at First Birth (yrs)") + theme_classic() + 
  theme(legend.title = element_text(size=15, face="bold"), legend.text = element_text(size=12),
        plot.margin = unit(c(0.2, 0.2, 0.2, 0.2), "cm"), legend.position = "bottom",
        axis.title.x = element_text(face="bold"),axis.title.y = element_text(face="bold"))

###########################################################################
###########################################################################

# Mutational burden
# Mutect data from Cereser et al. (2020)
cnvr.mutect.par.df <- mutate(cnvr.count.par.df2, total_mutation = Substitutions + INS.DEL)
cnvr.mutect.nul.df <- mutate(cnvr.count.nul.df2, total_mutation = Substitutions + INS.DEL)

# Recheck outliers and normality of data for total mutations
grubbs.test(cnvr.mutect.par.df$total_cnvr)
cnvr.mutect.par.df <- cnvr.mutect.par.df[!cnvr.mutect.par.df$total_cnvr == 84,]
grubbs.test(cnvr.mutect.par.df$total_cnvr)
grubbs.test(cnvr.mutect.par.df$total_mutation)

grubbs.test(cnvr.mutect.nul.df$total_cnvr)
grubbs.test(cnvr.mutect.nul.df$total_mutation)

# Normality test for mutation data
shapiro.test(cnvr.mutect.par.df$total_cnvr) # normal
shapiro.test(cnvr.mutect.par.df$total_mutation) # not normal
shapiro.test(cnvr.mutect.nul.df$total_cnvr) # not normal
shapiro.test(cnvr.mutect.nul.df$total_mutation) # not normal

# QQ plot for nulliparous for correlation: mutational buden
qq.mut.cor.par <- ggqqplot(cnvr.mutect.par.df$total_mutation) + labs(title = "Parous: MB") + 
  theme(plot.margin = unit(c(0.2, 0.2, 0.2, 0.2), "cm"), plot.title = element_text(face = "bold", size = 12),
        axis.title.x = element_text(face = "bold"), axis.title.y = element_text(face = "bold")) + xlim(-2,2) +
  annotate(geom="text", x = -1.5, y = 1200, label = paste("P =", round(shapiro.test(cnvr.mutect.par.df$total_mutation)$p.value, 4)))

# QQ plot for parous for correlation: mutational buden
qq.mut.cor.nul <- ggqqplot(cnvr.mutect.nul.df$total_mutation) + labs(title = "Nulliparous: MB") + 
  theme(plot.margin = unit(c(0.2, 0.2, 0.2, 0.2), "cm"), plot.title = element_text(face = "bold", size = 12),
        axis.title.x = element_text(face = "bold"), axis.title.y = element_text(face = "bold")) + xlim(-2,2) +
  annotate(geom="text", x = -1.5, y = 6000, label = paste("P =", round(shapiro.test(cnvr.mutect.nul.df$total_mutation)$p.value, 4)))

# Mutations and CNVrs
cnvr.mutation.cor <- ggplot()+
  geom_smooth(data = cnvr.mutect.par.df, aes(x = total_mutation, y = total_cnvr), se = T, method = "lm")+
  geom_smooth(data = cnvr.mutect.nul.df, aes(x = total_mutation, y = total_cnvr), se = T, method = "lm", color = "#E31B23", fill = "darkgray")+
  stat_cor(data = cnvr.mutect.par, aes(x = total_mutation, y = total_cnvr), method = "spearman", p.accuracy = 0.001, r.accuracy = 0.01, label.x = 1, label.y = 40, color = "#005CAB") +
  stat_cor(data = cnvr.mutect.nul, aes(x = total_mutation, y = total_cnvr), method = "spearman",p.accuracy = 0.001, r.accuracy = 0.01, label.x = 1, label.y = 38, color = "#E31B23") +
  geom_point(data = cnvr.mutect.par, aes(x = total_mutation, y = total_cnvr, fill = Parity), color = "#005CAB") +
  geom_point(data = cnvr.mutect.nul, aes(x = total_mutation, y = total_cnvr, fill = Parity), color = "#E31B23") +
  ylim(0,40) +  xlab("Total Mutational Burden per Donor") + ylab("Total CNVRs per Donor") + theme_classic() +
  theme(legend.title = element_text(size=15, face="bold"), legend.text = element_text(size=12),
        plot.margin = unit(c(0.2, 0.2, 0.2, 0.2), "cm"), legend.position = "bottom",
        axis.title.x = element_text(face="bold"),axis.title.y = element_text(face="bold"))

### NOTE: Correlation between CNV loss/gain and substitution/indels were initally explored but produced no statistical significance (not reported)

# Correlation Plots
tiff("final_cor_age_7.tiff", width = 8, height = 8, units = 'in', res = 300, compression = "none")
ggarrange(cor_cnvr, ggplot() + theme_void(), cor_amps, 
          cor_dels, ggplot() + theme_void(), cnvr.mutation.cor, 
          ncol = 3, nrow = 2, labels = c("A", "", "B", "C", "", "D"),
          widths = c(1, 0.2, 1, 1, 0.2, 1), label.x = -0.05, label.y = 1, common.legend = T,legend = "bottom") + 
  theme(plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm"), legend.position = c(0.8, 0.2))
dev.off()


###########################################################################
###########################################################################

# QQ-plot final figure
qq.plot1 <- ggarrange(qq.age.t.par, qq.cnvr.t.par, qq.amps.t.par, qq.dels.t.par,
                      ncol = 4, nrow = 1, labels = toupper(letters[1:4]), common.legend = T,legend = "bottom") + 
  theme(plot.margin = unit(c(0.3, 0.3, 0.3, 0.3), "cm"))

qq.plot2 <- ggarrange(qq.age.cor.par,	qq.age.1st.cor.par,	qq.cnvr.cor.par,	qq.amps.cor.par,
                      ncol = 4, nrow = 1, labels = toupper(letters[5:8]), common.legend = T,legend = "bottom") + 
  theme(plot.margin = unit(c(0.3, 0.3, 0.3, 0.3), "cm"))

qq.plot3 <- ggarrange(qq.dels.cor.par,	qq.mut.cor.par,	qq.mut.cor.nul,
                      ncol = 4, nrow = 1, labels = toupper(letters[9:11]), common.legend = T,legend = "bottom") + 
  theme(plot.margin = unit(c(0.3, 0.3, 0.3, 0.3), "cm"))

qq.plot4 <- ggarrange(qq.age.t.nul,	qq.cnvr.t.nul,	qq.amps.t.nul,	qq.dels.t.nul,
                      ncol = 4, nrow = 1, labels = toupper(letters[12:15]), common.legend = T,legend = "bottom") + 
  theme(plot.margin = unit(c(0.3, 0.3, 0.3, 0.3), "cm"))

tiff("final_qqplot_2.tiff", width = 15, height = 10, units = 'in', res = 300, compression = "none")
ggarrange(qq.plot1, qq.plot2, qq.plot3, qq.plot4,
          ncol = 1, nrow = 4,common.legend = T,legend = "bottom") + 
  theme(plot.margin = unit(c(0.3, 0.3, 0.3, 0.3), "cm"))
dev.off()

###########################################################################
###########################################################################

# Identify CNVs that are shared between parous and nulliparous
system("bedtools intersect -wa -f 0.7 -r -a result_parous_filt.bed -b result_nulliparous_filt.bed > cnvr_par_nul_intersect.bed")
cnvr.intersect.par.df <- as.data.frame(read.table("cnvr_par_nul_intersect.bed",header = FALSE, sep="\t", stringsAsFactors=FALSE, quote=""))
colnames(cnvr.intersect.par.df) <- colnames(result.parous.filt)
cnvr.intersect.par.df <- cnvr.intersect.par.df[order(cnvr.intersect.par.df$start, decreasing = F),]

system("bedtools intersect -wa -f 0.7 -r -a result_nulliparous_filt.bed -b result_parous_filt.bed > cnvr_nul_par_intersect.bed")
cnvr.intersect.nul.df <- as.data.frame(read.table("cnvr_nul_par_intersect.bed",header = FALSE, sep="\t", stringsAsFactors=FALSE, quote=""))
colnames(cnvr.intersect.nul.df) <- colnames(result.nulliparous.filt)
cnvr.intersect.nul.df <- cnvr.intersect.nul.df[order(cnvr.intersect.nul.df$start, decreasing = F),]

cnvr.intersect.par.df <- pivot_longer(cnvr.intersect.par.df, cols = colnames(cnvr.intersect.par.df[,4:ncol(cnvr.intersect.par.df)]))
cnvr.intersect.par.df <- cnvr.intersect.par.df[!is.na(cnvr.intersect.par.df$value),]
cnvr.intersect.par.df <- cnvr.intersect.par.df %>% add_count(seqnames, start, end, name = "total_cnvr")
cnvr.intersect.par.df <- pivot_wider(cnvr.intersect.par.df, names_from = name, values_from = value)

cnvr.intersect.nul.df <- pivot_longer(cnvr.intersect.nul.df, cols = colnames(cnvr.intersect.nul.df[,4:ncol(cnvr.intersect.nul.df)]))
cnvr.intersect.nul.df <- cnvr.intersect.nul.df[!is.na(cnvr.intersect.nul.df$value),]
cnvr.intersect.nul.df <- cnvr.intersect.nul.df %>% add_count(seqnames, start, end, name = "total_cnvr")
cnvr.intersect.nul.df <- pivot_wider(cnvr.intersect.nul.df, names_from = name, values_from = value)

cnvr.intersect.par.df <- mutate(cnvr.intersect.par.df, no_cnvr = 17 - total_cnvr)
cnvr.intersect.nul.df <- mutate(cnvr.intersect.nul.df, no_cnvr = 12 - total_cnvr)

### NOTE: cnvr.intersect.par.df and cnvr.intersect.nul.df are identicical
### cnvr.intersect.nul.df was produced to confirm cnvr.intersect.par.df

###########################################################################
###########################################################################

# Fisher's exact test for common CNVs
f.test.CNV <- array(NA, c(nrow(cnvr.intersect.par.df),4)) # cnvr.intersect.nu.df can be used to
colnames(f.test.CNV)<-c("p.value","odd.ratio","lower.CI","upper.CI")
f.test.CNV <- as.data.frame(f.test.CNV)
f.test.CNV$par.chr <- cnvr.intersect.par.df$seqnames
f.test.CNV$par.start <- cnvr.intersect.par.df$start
f.test.CNV$par.end <- cnvr.intersect.par.df$end
f.test.CNV$nul.chr <- cnvr.intersect.nul.df$seqnames
f.test.CNV$nul.start <- cnvr.intersect.nul.df$start
f.test.CNV$nul.end <- cnvr.intersect.nul.df$end

for(i in 1:nrow(f.test.CNV)){
  f.test.CNV.all <- fisher.test(matrix(data = as.numeric(c(cnvr.intersect.par.df[i,c("total_cnvr")], cnvr.intersect.nul.df[i,c("total_cnvr")],
                                                           cnvr.intersect.par.df[i,c("no_cnvr")], cnvr.intersect.nul.df[i,c("no_cnvr")])),nrow=2))
  f.test.CNV$p.value[i] <- f.test.CNV.all$p.value
  f.test.CNV$odd.ratio[i] <- f.test.CNV.all$estimate[1]
  f.test.CNV$lower.CI[i] <- f.test.CNV.all$conf.int[c(1)]
  f.test.CNV$upper.CI[i] <- f.test.CNV.all$conf.int[c(2)]
}

write.csv(f.test.CNV, file = "fishers_test_common_cnv.csv")

###########################################################################
###########################################################################

# Isolate genes common/shared CNVRs for gene-set enrichment analysis
# shared.cnvrs.all.df <- cnvr.intersect.nul.df
# Fisher's test, P < 0.05: chr21:9400001-10050000 [2,] and (chr7:74625001-75000000) [9,]

shared.cnvrs.all.df <- cnvr.intersect.par.df # can be pipe using cnvr.intersect.nul.df - results in same enrichment pathways
shared.cnvrs.df <- shared.cnvrs.all.df[c(2,9),] 
write.table(as.data.frame(shared.cnvrs.all.df), file = "shared_cnvrs_all.bed", sep = "\t",row.names = F, quote = F, col.names = F) 
write.table(as.data.frame(shared.cnvrs.df), file = "shared_cnvrs.bed", sep = "\t",row.names = F, quote = F, col.names = F) 
system("bedtools intersect -wao -a shared_cnvrs.bed -b refGene.bed > annot_shared_cnvrs.bed")
annot.shared.cnvrs <- as.data.frame(read.table("annot_shared_cnvrs.bed", header = FALSE, sep="\t",stringsAsFactors=FALSE, quote=""))
colnames(annot.shared.cnvrs) <- c("Chr","CNVR_start","CNVR_end",  colnames(shared.cnvrs.df[,4:ncol(shared.cnvrs.df)]),"Chr","Gene_start","Gene_end","Gene_ID","Overlaps")
genes.list.commmon.cnv.gsea <- as.data.frame(unique(annot.shared.cnvrs$Gene_ID))
colnames(genes.list.commmon.cnv.gsea) <- "Genes"
write.csv(genes.list.commmon.cnv.gsea, "genes_common_gsea.csv")

###########################################################################
###########################################################################

# unique CNVRs in Parous + more than 1 donor
unique.cnvrs.par.df <- result.parous.filt
write.table(as.data.frame(unique.cnvrs.par.df), file = "unique_cnvrs_par.bed",  sep = "\t",row.names = F, quote = F, col.names = F)
system("bedtools intersect -v -a unique_cnvrs_par.bed -b shared_cnvrs_all.bed > unique_cnvrs_par_filt.bed")
unique.cnvrs.par.df <- as.data.frame(read.table("unique_cnvrs_par_filt.bed", header = FALSE, sep="\t",stringsAsFactors=FALSE, quote=""))
colnames(unique.cnvrs.par.df) <- colnames(result.parous.filt)
unique.cnvrs.par.df <- pivot_longer(unique.cnvrs.par.df,cols = colnames(unique.cnvrs.par.df[,4:ncol(unique.cnvrs.par.df)]))
unique.cnvrs.par.df <- unique.cnvrs.par.df[!is.na(unique.cnvrs.par.df$value),]
unique.cnvrs.par.df <- unique.cnvrs.par.df %>% add_count(seqnames, start, end, name = "total_cnvr")
unique.cnvrs.par.df <- unique.cnvrs.par.df[!unique.cnvrs.par.df$total_cnvr == 1,]
unique.cnvrs.par.df <- pivot_wider(unique.cnvrs.par.df, names_from = name, values_from = value)

write.table(as.data.frame(unique.cnvrs.par.df), file = "unique_cnvrs_par_filt_2.bed",sep = "\t",row.names = F, quote = F, col.names = F)
system("bedtools intersect -wao -a unique_cnvrs_par_filt_2.bed -b refGene.bed > annot_unique_cnvrs_par.bed")
annot.unique.cnvrs.par <- as.data.frame(read.table("annot_unique_cnvrs_par.bed", header = FALSE, sep="\t",stringsAsFactors=FALSE, quote=""))
colnames(annot.unique.cnvrs.par) <- c(colnames(unique.cnvrs.par.df),"chr","start","end", "Gene_ID","overlaps")
genes.list.unique.cnv.gsea.par <- as.data.frame(unique(annot.unique.cnvrs.par$Gene_ID))
colnames(genes.list.unique.cnv.gsea.par) <- "Genes"
write.csv(genes.list.unique.cnv.gsea.par, "genes_unique_gsea_par.csv")

# unique CNVRs in nulliparous + more than 1 donor
unique.cnvrs.nul.df <- result.nulliparous.filt
write.table(as.data.frame(unique.cnvrs.nul.df), file = "unique_cnvrs_nul.bed", sep = "\t",row.names = F, quote = F, col.names = F)
system("bedtools intersect -v -a unique_cnvrs_nul.bed -b shared_cnvrs_all.bed > unique_cnvrs_nul_filt.bed")
unique.cnvrs.nul.df <- as.data.frame(read.table("unique_cnvrs_nul_filt.bed", header = FALSE, sep="\t",stringsAsFactors=FALSE, quote=""))
colnames(unique.cnvrs.nul.df) <- colnames(result.nulliparous.filt)
unique.cnvrs.nul.df <- pivot_longer(unique.cnvrs.nul.df,cols = colnames(unique.cnvrs.nul.df[,4:ncol(unique.cnvrs.nul.df)]))
unique.cnvrs.nul.df <- unique.cnvrs.nul.df[!is.na(unique.cnvrs.nul.df$value),]
unique.cnvrs.nul.df <- unique.cnvrs.nul.df %>% add_count(seqnames, start, end, name = "total_cnvr")
unique.cnvrs.nul.df <- unique.cnvrs.nul.df[!unique.cnvrs.nul.df$total_cnvr == 1,]
unique.cnvrs.nul.df <- pivot_wider(unique.cnvrs.nul.df, names_from = name, values_from = value)

write.table(as.data.frame(unique.cnvrs.nul.df), file = "unique_cnvrs_nul_filt_2.bed", sep = "\t",row.names = F, quote = F, col.names = F)
system("bedtools intersect -wao -a unique_cnvrs_nul_filt_2.bed -b refGene.bed > annot_unique_cnvrs_nul.bed")
annot.unique.cnvrs.nul <- as.data.frame(read.table("annot_unique_cnvrs_nul.bed", header = FALSE, sep="\t",stringsAsFactors=FALSE, quote=""))
colnames(annot.unique.cnvrs.nul) <- c(colnames(unique.cnvrs.nul.df),"chr","start","end", "Gene_ID","overlaps")
genes.list.unique.cnv.gsea.nul <- as.data.frame(unique(annot.unique.cnvrs.nul$Gene_ID))
colnames(genes.list.unique.cnv.gsea.nul) <- "Genes"
write.csv(genes.list.unique.cnv.gsea.nul, "genes_unique_gsea_nul.csv")

###########################################################################
###########################################################################

# GO and functional pathways enrichment analysis
# Pipe genes on: Enrichr (https://maayanlab.cloud/Enrichr/)
# Values were acquired from Enrichr

gsea.barplot.df <- data.frame(matrix(NA, nrow = 2, ncol = 1))
gsea.barplot.df[,1] <- as.numeric(c("0.04600", "0.0008272"))
colnames(gsea.barplot.df) <- "FDR"
gsea.barplot.df <- mutate(gsea.barplot.df, FDR = -log10(gsea.barplot.df$FDR))
gsea.barplot.df$GO <- c("Fibroblast Growth Factor-Activated Receptor Activity", "Benzodiazepine Receptor Binding")

kegg.barplot.df <- data.frame(matrix(NA, nrow = 2, ncol = 1))
kegg.barplot.df[,1] <- as.numeric(c("0.02191", "0.02191"))
colnames(kegg.barplot.df) <- "FDR"
kegg.barplot.df <- mutate(kegg.barplot.df, FDR = -log10(kegg.barplot.df$FDR))
kegg.barplot.df$GO <- c("Progesterone-mediated oocyte maturation", "Oocyte meiosis")

gsea.go.plot1 <- ggbarplot(gsea.barplot.df, x = "GO", y = "FDR", color = "black", fill = "orange", width = 0.5) + 
  labs(title = "                       GO: Molecular Function") + coord_flip() + ylab("-log10(FDR)") + ylim(0,5) +
  theme(plot.margin = unit(c(0.2, 0.2, 0.2, 0.2), "cm"), plot.title = element_text(face = "bold", size = 15), axis.text.y = element_blank()) +
  annotate(geom="text", x = 2.43, y = 1.7, size = 4.6, parse = TRUE, label = 'bold("Benzodiazepine receptor binding")') +
  annotate(geom="text", x = 1.43, y = 2.62, size = 4.6, parse = TRUE, label = 'bold("Fibroblast growth factor-activated receptor activity")')

gsea.kegg.plot1 <- ggbarplot(kegg.barplot.df, x = "GO", y = "FDR", color = "black", fill = "orange", width = 0.5) + 
  labs(title = "                       KEGG Pathways") + coord_flip() + ylab("-log10(FDR)") + ylim(0,5) +
  theme(plot.margin = unit(c(0.2, 0.2, 0.2, 0.2), "cm"), plot.title = element_text(face = "bold", size = 15), axis.text.y = element_blank()) +
  annotate(geom="text", x = 2.43, y = 2.17, size = 4.6, parse = TRUE, label = 'bold("Progesterone-mediated oocyte maturation")') +
  annotate(geom="text", x = 1.43, y = 0.78, size = 4.6, parse = TRUE, label = 'bold("Oocyte meiosis")')

tiff("final_gsea_kegg.tiff", width = 10, height = 2.5, units = 'in', res = 300, compression = "none")
ggarrange(gsea.go.plot1, gsea.kegg.plot1, ncol = 2, nrow = 1, labels = c("A","B"))
dev.off()

###########################################################################
###########################################################################

# Known pathologic CNVRs
# Excluing CNVs from donor E61
pathogenic.par.raw.df <- result.parous.filt.exclude_E61
pathogenic.nul.raw.df <- result.nulliparous.filt

pathogenic.par.df <- pivot_longer(pathogenic.par.raw.df,cols = colnames(pathogenic.par.raw.df[,4:ncol(pathogenic.par.raw.df)]))
pathogenic.par.df <- pathogenic.par.df[!is.na(pathogenic.par.df$value),]
pathogenic.par.df <- pathogenic.par.df %>% add_count(seqnames, start, end, name = "total_cnvr")
pathogenic.par.df <- pathogenic.par.df[!pathogenic.par.df$total_cnvr == 1,]
pathogenic.par.df <- pivot_wider(pathogenic.par.df, names_from = name, values_from = value)

pathogenic.nul.df <- pivot_longer(pathogenic.nul.raw.df,cols = colnames(pathogenic.nul.raw.df[,4:ncol(pathogenic.nul.raw.df)]))
pathogenic.nul.df <- pathogenic.nul.df[!is.na(pathogenic.nul.df$value),]
pathogenic.nul.df <- pathogenic.nul.df %>% add_count(seqnames, start, end, name = "total_cnvr")
pathogenic.nul.df <- pathogenic.nul.df[!pathogenic.nul.df$total_cnvr == 1,]
pathogenic.nul.df <- pivot_wider(pathogenic.nul.df, names_from = name, values_from = value)

system("wget 'https://ftp.ncbi.nlm.nih.gov/pub/dbVar/sandbox/dbvarhub/hg19/clinvar_pathogenic.bed'")
pathogenic.cnvr <- as.data.frame(read.table("clinvar_pathogenic.bed", header = F, sep="\t", stringsAsFactors=FALSE, quote=""))
# Colnames for clinvar_pathogenic.bed are found here: https://ftp.ncbi.nlm.nih.gov/pub/dbVar/sandbox/dbvarhub/hg19/clinvar.as
colnames(pathogenic.cnvr) <- c("chrom","chromStart","chromEnd","name","score","strand",
                               "thickStart","thickEnd","reserved","clinical","type",
                               "length","label","clinvar_name","gene","gene_sym","last_eval",
                               "pheno_ids",",pheno_list","origin","cyto","review","submitters",
                               "guidelines","gtr","other_ids",",clinvar_rcv",",call_list")

pathogenic.cnvr[pathogenic.cnvr == ""] <- NA
pathogenic.cnvr[pathogenic.cnvr == "-"] <- NA
colnames(pathogenic.cnvr) <- c("seqnames","start","end",colnames(pathogenic.cnvr[,4:ncol(pathogenic.cnvr)]))
pathogenic.cnvr <- pathogenic.cnvr[,c(1:4,13,26)]

write.table(as.data.frame(pathogenic.par.df), file = "pathogenic_cnvr_par.bed", sep = "\t",row.names = F, quote = F, col.names = F) 
write.table(as.data.frame(pathogenic.nul.df), file = "pathogenic_cnvr_nul.bed", sep = "\t",row.names = F, quote = F, col.names = F) 
write.table(as.data.frame(pathogenic.cnvr), file = "pathogenic_cnvr.bed", sep = "\t",row.names = F, quote = F, col.names = F) 

system("bedtools intersect -wao -f 1.0 -a pathogenic_cnvr_par.bed -b pathogenic_cnvr.bed > pathogenic_parous.bed")
pathogenic.par.mapped <- as.data.frame(read.table("pathogenic_parous.bed", header = FALSE, sep="\t", stringsAsFactors=FALSE, quote=""))
colnames(pathogenic.par.mapped) <- c(colnames(pathogenic.par.df),colnames(pathogenic.cnvr), "overlaps")
pathogenic.par.mapped <- pathogenic.par.mapped[!duplicated(pathogenic.par.mapped$name),]
pathogenic.par.mapped <- pathogenic.par.mapped[!duplicated(pathogenic.par.mapped$label),]

system("bedtools intersect -wao -f 1.0 -a pathogenic_cnvr_nul.bed -b pathogenic_cnvr.bed > pathogenic_nulliparous.bed")
pathogenic.nul.mapped <- as.data.frame(read.table("pathogenic_nulliparous.bed", header = FALSE, sep="\t", stringsAsFactors=FALSE, quote=""))
colnames(pathogenic.nul.mapped) <- c(colnames(pathogenic.nul.df),colnames(pathogenic.cnvr))
pathogenic.nul.mapped <- pathogenic.nul.mapped[!duplicated(pathogenic.nul.mapped$name),]
pathogenic.nul.mapped <- pathogenic.nul.mapped[!duplicated(pathogenic.nul.mapped$label),]

pathogenic.match <- as.data.frame(match(pathogenic.nul.mapped$name, pathogenic.par.mapped$name))
colnames(pathogenic.match) <- "V1"
pathogenic.match <- pathogenic.match[!is.na(pathogenic.match$V1),]

write.csv(pathogenic.par.mapped, file = "pathogenic_par.csv")
write.csv(pathogenic.nul.mapped, file = "pathogenic_nul.csv")

###########################################################################
###########################################################################

# Window length sample:
# Chromosome 22, donor
WL.sample <- list.files(pattern = ".bam$")
bamDataRanges.WL.sample <- getReadCountsFromBAM(WL.sample, sampleNames = c("c35", "DD30", "e37","f38", "S19", "T20", "Y25", "Z26"),
                                                refSeqNames = "chr22", WL = 1000) # WL = 5000

ref_WL.sample <- referencecn.mops(cases = bamDataRanges.WL.sample[,c("c35","e37","S19","Y25")],
                                  control = bamDataRanges.WL.sample[,c("DD30","f38","T20","Z26")],
                                  norm = 1, I = c(0.025,0.5,1,1.5,2,2.5,3,3.5,4,8,16,32,64),
                                  classes = paste("CN",c(0:8,16,32,64,128),sep=""), segAlgorithm = "DNAcopy", priorImpact = 1000000)


CNMOPS.WL.sample <- calcIntegerCopyNumbers(ref_WL.sample)
segplot(CNMOPS.WL.sample)
